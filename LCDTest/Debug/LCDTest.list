
LCDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000486c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ef0  08004978  08004978  00014978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b868  0800b868  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b868  0800b868  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b868  0800b868  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b868  0800b868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800b870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032a0  200000e0  0800b950  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20003380  0800b950  00023380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084ef  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e26  00000000  00000000  000285f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018123  00000000  00000000  0002b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009678  00000000  00000000  0004342b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836da  00000000  00000000  0004caa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d017d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000d01d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004960 	.word	0x08004960

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004960 	.word	0x08004960

0800014c <ClearTest>:
#endif
#endif

//-----------------------------------------------------------------------------
uint32_t ClearTest(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  uint32_t ctStartT = GetTime();
 8000152:	f002 fe3f 	bl	8002dd4 <HAL_GetTick>
 8000156:	6078      	str	r0, [r7, #4]
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000158:	2000      	movs	r0, #0
 800015a:	f001 ff0d 	bl	8001f78 <BSP_LCD_Clear>
  return(GetTime() - ctStartT);
 800015e:	f002 fe39 	bl	8002dd4 <HAL_GetTick>
 8000162:	4602      	mov	r2, r0
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	1ad3      	subs	r3, r2, r3
}
 8000168:	4618      	mov	r0, r3
 800016a:	3708      	adds	r7, #8
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}

08000170 <PixelTest>:

//-----------------------------------------------------------------------------
uint32_t PixelTest(uint32_t n)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint16_t c, x, y;

  uint32_t ctStartT = GetTime();
 8000178:	f002 fe2c 	bl	8002dd4 <HAL_GetTick>
 800017c:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 800017e:	2300      	movs	r3, #0
 8000180:	617b      	str	r3, [r7, #20]
 8000182:	e030      	b.n	80001e6 <PixelTest+0x76>
  {
    x = random() % BSP_LCD_GetXSize();
 8000184:	f003 fbe0 	bl	8003948 <random>
 8000188:	4604      	mov	r4, r0
 800018a:	f001 fea5 	bl	8001ed8 <BSP_LCD_GetXSize>
 800018e:	4603      	mov	r3, r0
 8000190:	fb94 f2f3 	sdiv	r2, r4, r3
 8000194:	fb03 f302 	mul.w	r3, r3, r2
 8000198:	1ae3      	subs	r3, r4, r3
 800019a:	81fb      	strh	r3, [r7, #14]
    y = random() % BSP_LCD_GetYSize();
 800019c:	f003 fbd4 	bl	8003948 <random>
 80001a0:	4604      	mov	r4, r0
 80001a2:	f001 fea5 	bl	8001ef0 <BSP_LCD_GetYSize>
 80001a6:	4603      	mov	r3, r0
 80001a8:	fb94 f2f3 	sdiv	r2, r4, r3
 80001ac:	fb03 f302 	mul.w	r3, r3, r2
 80001b0:	1ae3      	subs	r3, r4, r3
 80001b2:	81bb      	strh	r3, [r7, #12]
    c = random() % 0xFFFF;
 80001b4:	f003 fbc8 	bl	8003948 <random>
 80001b8:	4602      	mov	r2, r0
 80001ba:	4b11      	ldr	r3, [pc, #68]	; (8000200 <PixelTest+0x90>)
 80001bc:	fb83 1302 	smull	r1, r3, r3, r2
 80001c0:	4413      	add	r3, r2
 80001c2:	13d9      	asrs	r1, r3, #15
 80001c4:	17d3      	asrs	r3, r2, #31
 80001c6:	1ac9      	subs	r1, r1, r3
 80001c8:	460b      	mov	r3, r1
 80001ca:	041b      	lsls	r3, r3, #16
 80001cc:	1a5b      	subs	r3, r3, r1
 80001ce:	1ad1      	subs	r1, r2, r3
 80001d0:	460b      	mov	r3, r1
 80001d2:	817b      	strh	r3, [r7, #10]
    BSP_LCD_DrawPixel(x, y, c);
 80001d4:	897a      	ldrh	r2, [r7, #10]
 80001d6:	89b9      	ldrh	r1, [r7, #12]
 80001d8:	89fb      	ldrh	r3, [r7, #14]
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 ff14 	bl	8002008 <BSP_LCD_DrawPixel>
  for(uint32_t i = 0; i < n; i++)
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	3301      	adds	r3, #1
 80001e4:	617b      	str	r3, [r7, #20]
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3ca      	bcc.n	8000184 <PixelTest+0x14>
  }
  return(GetTime() - ctStartT);
 80001ee:	f002 fdf1 	bl	8002dd4 <HAL_GetTick>
 80001f2:	4602      	mov	r2, r0
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	1ad3      	subs	r3, r2, r3
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	371c      	adds	r7, #28
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd90      	pop	{r4, r7, pc}
 8000200:	80008001 	.word	0x80008001

08000204 <LineTest>:

//-----------------------------------------------------------------------------
uint32_t LineTest(uint32_t n)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  uint16_t x1, y1, x2, y2;

  uint32_t ctStartT = GetTime();
 800020c:	f002 fde2 	bl	8002dd4 <HAL_GetTick>
 8000210:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
 8000216:	e04a      	b.n	80002ae <LineTest+0xaa>
  {
    x1 = random() % BSP_LCD_GetXSize();
 8000218:	f003 fb96 	bl	8003948 <random>
 800021c:	4604      	mov	r4, r0
 800021e:	f001 fe5b 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000222:	4603      	mov	r3, r0
 8000224:	fb94 f2f3 	sdiv	r2, r4, r3
 8000228:	fb03 f302 	mul.w	r3, r3, r2
 800022c:	1ae3      	subs	r3, r4, r3
 800022e:	81fb      	strh	r3, [r7, #14]
    y1 = random() % BSP_LCD_GetYSize();
 8000230:	f003 fb8a 	bl	8003948 <random>
 8000234:	4604      	mov	r4, r0
 8000236:	f001 fe5b 	bl	8001ef0 <BSP_LCD_GetYSize>
 800023a:	4603      	mov	r3, r0
 800023c:	fb94 f2f3 	sdiv	r2, r4, r3
 8000240:	fb03 f302 	mul.w	r3, r3, r2
 8000244:	1ae3      	subs	r3, r4, r3
 8000246:	81bb      	strh	r3, [r7, #12]
    x2 = random() % BSP_LCD_GetXSize();
 8000248:	f003 fb7e 	bl	8003948 <random>
 800024c:	4604      	mov	r4, r0
 800024e:	f001 fe43 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000252:	4603      	mov	r3, r0
 8000254:	fb94 f2f3 	sdiv	r2, r4, r3
 8000258:	fb03 f302 	mul.w	r3, r3, r2
 800025c:	1ae3      	subs	r3, r4, r3
 800025e:	817b      	strh	r3, [r7, #10]
    y2 = random() % BSP_LCD_GetYSize();
 8000260:	f003 fb72 	bl	8003948 <random>
 8000264:	4604      	mov	r4, r0
 8000266:	f001 fe43 	bl	8001ef0 <BSP_LCD_GetYSize>
 800026a:	4603      	mov	r3, r0
 800026c:	fb94 f2f3 	sdiv	r2, r4, r3
 8000270:	fb03 f302 	mul.w	r3, r3, r2
 8000274:	1ae3      	subs	r3, r4, r3
 8000276:	813b      	strh	r3, [r7, #8]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 8000278:	f003 fb66 	bl	8003948 <random>
 800027c:	4602      	mov	r2, r0
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <LineTest+0xc4>)
 8000280:	fb83 1302 	smull	r1, r3, r3, r2
 8000284:	4413      	add	r3, r2
 8000286:	13d9      	asrs	r1, r3, #15
 8000288:	17d3      	asrs	r3, r2, #31
 800028a:	1ac9      	subs	r1, r1, r3
 800028c:	460b      	mov	r3, r1
 800028e:	041b      	lsls	r3, r3, #16
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	1ad1      	subs	r1, r2, r3
 8000294:	b28b      	uxth	r3, r1
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fe36 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawLine(x1, y1, x2, y2);
 800029c:	893b      	ldrh	r3, [r7, #8]
 800029e:	897a      	ldrh	r2, [r7, #10]
 80002a0:	89b9      	ldrh	r1, [r7, #12]
 80002a2:	89f8      	ldrh	r0, [r7, #14]
 80002a4:	f001 ff40 	bl	8002128 <BSP_LCD_DrawLine>
  for(uint32_t i = 0; i < n; i++)
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	3301      	adds	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	697a      	ldr	r2, [r7, #20]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3b0      	bcc.n	8000218 <LineTest+0x14>
  }
  return(GetTime() - ctStartT);
 80002b6:	f002 fd8d 	bl	8002dd4 <HAL_GetTick>
 80002ba:	4602      	mov	r2, r0
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	1ad3      	subs	r3, r2, r3
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	371c      	adds	r7, #28
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd90      	pop	{r4, r7, pc}
 80002c8:	80008001 	.word	0x80008001

080002cc <FillRectTest>:

//-----------------------------------------------------------------------------
uint32_t FillRectTest(uint32_t n)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint16_t x, y, w, h;

  uint32_t ctStartT = GetTime();
 80002d4:	f002 fd7e 	bl	8002dd4 <HAL_GetTick>
 80002d8:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e054      	b.n	800038a <FillRectTest+0xbe>
  {
    w = random() % (BSP_LCD_GetXSize() >> 1);
 80002e0:	f003 fb32 	bl	8003948 <random>
 80002e4:	4604      	mov	r4, r0
 80002e6:	f001 fdf7 	bl	8001ed8 <BSP_LCD_GetXSize>
 80002ea:	4603      	mov	r3, r0
 80002ec:	085b      	lsrs	r3, r3, #1
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	fb94 f2f3 	sdiv	r2, r4, r3
 80002f4:	fb03 f302 	mul.w	r3, r3, r2
 80002f8:	1ae3      	subs	r3, r4, r3
 80002fa:	81fb      	strh	r3, [r7, #14]
    h = random() % (BSP_LCD_GetYSize() >> 1);
 80002fc:	f003 fb24 	bl	8003948 <random>
 8000300:	4604      	mov	r4, r0
 8000302:	f001 fdf5 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000306:	4603      	mov	r3, r0
 8000308:	085b      	lsrs	r3, r3, #1
 800030a:	b29b      	uxth	r3, r3
 800030c:	fb94 f2f3 	sdiv	r2, r4, r3
 8000310:	fb03 f302 	mul.w	r3, r3, r2
 8000314:	1ae3      	subs	r3, r4, r3
 8000316:	81bb      	strh	r3, [r7, #12]
    x = random() % (BSP_LCD_GetXSize() - w);
 8000318:	f003 fb16 	bl	8003948 <random>
 800031c:	4604      	mov	r4, r0
 800031e:	f001 fddb 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	89fb      	ldrh	r3, [r7, #14]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	fb94 f2f3 	sdiv	r2, r4, r3
 800032e:	fb03 f302 	mul.w	r3, r3, r2
 8000332:	1ae3      	subs	r3, r4, r3
 8000334:	817b      	strh	r3, [r7, #10]
    y = random() % (BSP_LCD_GetYSize() - h);
 8000336:	f003 fb07 	bl	8003948 <random>
 800033a:	4604      	mov	r4, r0
 800033c:	f001 fdd8 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	89bb      	ldrh	r3, [r7, #12]
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	fb94 f2f3 	sdiv	r2, r4, r3
 800034c:	fb03 f302 	mul.w	r3, r3, r2
 8000350:	1ae3      	subs	r3, r4, r3
 8000352:	813b      	strh	r3, [r7, #8]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 8000354:	f003 faf8 	bl	8003948 <random>
 8000358:	4602      	mov	r2, r0
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <FillRectTest+0xd8>)
 800035c:	fb83 1302 	smull	r1, r3, r3, r2
 8000360:	4413      	add	r3, r2
 8000362:	13d9      	asrs	r1, r3, #15
 8000364:	17d3      	asrs	r3, r2, #31
 8000366:	1ac9      	subs	r1, r1, r3
 8000368:	460b      	mov	r3, r1
 800036a:	041b      	lsls	r3, r3, #16
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	1ad1      	subs	r1, r2, r3
 8000370:	b28b      	uxth	r3, r1
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fdc8 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(x, y, w, h);
 8000378:	89bb      	ldrh	r3, [r7, #12]
 800037a:	89fa      	ldrh	r2, [r7, #14]
 800037c:	8939      	ldrh	r1, [r7, #8]
 800037e:	8978      	ldrh	r0, [r7, #10]
 8000380:	f002 f8a6 	bl	80024d0 <BSP_LCD_FillRect>
  for(uint32_t i = 0; i < n; i++)
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	3301      	adds	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
 800038a:	697a      	ldr	r2, [r7, #20]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	429a      	cmp	r2, r3
 8000390:	d3a6      	bcc.n	80002e0 <FillRectTest+0x14>
  }
  return(GetTime() - ctStartT);
 8000392:	f002 fd1f 	bl	8002dd4 <HAL_GetTick>
 8000396:	4602      	mov	r2, r0
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	1ad3      	subs	r3, r2, r3
}
 800039c:	4618      	mov	r0, r3
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	80008001 	.word	0x80008001

080003a8 <CharTest>:

//-----------------------------------------------------------------------------
uint32_t CharTest(uint32_t n)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b089      	sub	sp, #36	; 0x24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  uint16_t x, y;
  uint8_t  c;
  sFONT * fp;

  uint32_t ctStartT = GetTime();
 80003b0:	f002 fd10 	bl	8002dd4 <HAL_GetTick>
 80003b4:	61b8      	str	r0, [r7, #24]
  for(uint32_t i = 0; i < n; i++)
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
 80003ba:	e091      	b.n	80004e0 <CharTest+0x138>
  {
    c = random() % 5;
 80003bc:	f003 fac4 	bl	8003948 <random>
 80003c0:	4602      	mov	r2, r0
 80003c2:	4b4e      	ldr	r3, [pc, #312]	; (80004fc <CharTest+0x154>)
 80003c4:	fb83 1302 	smull	r1, r3, r3, r2
 80003c8:	1059      	asrs	r1, r3, #1
 80003ca:	17d3      	asrs	r3, r2, #31
 80003cc:	1ac9      	subs	r1, r1, r3
 80003ce:	460b      	mov	r3, r1
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	440b      	add	r3, r1
 80003d4:	1ad1      	subs	r1, r2, r3
 80003d6:	460b      	mov	r3, r1
 80003d8:	75fb      	strb	r3, [r7, #23]
    if(c == 0)
 80003da:	7dfb      	ldrb	r3, [r7, #23]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d103      	bne.n	80003e8 <CharTest+0x40>
      BSP_LCD_SetFont(&Font8);
 80003e0:	4847      	ldr	r0, [pc, #284]	; (8000500 <CharTest+0x158>)
 80003e2:	f001 fdb1 	bl	8001f48 <BSP_LCD_SetFont>
 80003e6:	e01a      	b.n	800041e <CharTest+0x76>
    else if(c == 1)
 80003e8:	7dfb      	ldrb	r3, [r7, #23]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d103      	bne.n	80003f6 <CharTest+0x4e>
      BSP_LCD_SetFont(&Font12);
 80003ee:	4845      	ldr	r0, [pc, #276]	; (8000504 <CharTest+0x15c>)
 80003f0:	f001 fdaa 	bl	8001f48 <BSP_LCD_SetFont>
 80003f4:	e013      	b.n	800041e <CharTest+0x76>
    else if(c == 2)
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d103      	bne.n	8000404 <CharTest+0x5c>
      BSP_LCD_SetFont(&Font16);
 80003fc:	4842      	ldr	r0, [pc, #264]	; (8000508 <CharTest+0x160>)
 80003fe:	f001 fda3 	bl	8001f48 <BSP_LCD_SetFont>
 8000402:	e00c      	b.n	800041e <CharTest+0x76>
    else if(c == 3)
 8000404:	7dfb      	ldrb	r3, [r7, #23]
 8000406:	2b03      	cmp	r3, #3
 8000408:	d103      	bne.n	8000412 <CharTest+0x6a>
      BSP_LCD_SetFont(&Font20);
 800040a:	4840      	ldr	r0, [pc, #256]	; (800050c <CharTest+0x164>)
 800040c:	f001 fd9c 	bl	8001f48 <BSP_LCD_SetFont>
 8000410:	e005      	b.n	800041e <CharTest+0x76>
    else if(c == 4)
 8000412:	7dfb      	ldrb	r3, [r7, #23]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d102      	bne.n	800041e <CharTest+0x76>
      BSP_LCD_SetFont(&Font24);
 8000418:	483d      	ldr	r0, [pc, #244]	; (8000510 <CharTest+0x168>)
 800041a:	f001 fd95 	bl	8001f48 <BSP_LCD_SetFont>
    fp = BSP_LCD_GetFont();
 800041e:	f001 fda1 	bl	8001f64 <BSP_LCD_GetFont>
 8000422:	6138      	str	r0, [r7, #16]

    x = random() % (BSP_LCD_GetXSize() - fp->Width);
 8000424:	f003 fa90 	bl	8003948 <random>
 8000428:	4604      	mov	r4, r0
 800042a:	f001 fd55 	bl	8001ed8 <BSP_LCD_GetXSize>
 800042e:	4603      	mov	r3, r0
 8000430:	461a      	mov	r2, r3
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	889b      	ldrh	r3, [r3, #4]
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	fb94 f2f3 	sdiv	r2, r4, r3
 800043c:	fb03 f302 	mul.w	r3, r3, r2
 8000440:	1ae3      	subs	r3, r4, r3
 8000442:	81fb      	strh	r3, [r7, #14]
    y = random() % (BSP_LCD_GetYSize() - fp->Height);
 8000444:	f003 fa80 	bl	8003948 <random>
 8000448:	4604      	mov	r4, r0
 800044a:	f001 fd51 	bl	8001ef0 <BSP_LCD_GetYSize>
 800044e:	4603      	mov	r3, r0
 8000450:	461a      	mov	r2, r3
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	88db      	ldrh	r3, [r3, #6]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	fb94 f2f3 	sdiv	r2, r4, r3
 800045c:	fb03 f302 	mul.w	r3, r3, r2
 8000460:	1ae3      	subs	r3, r4, r3
 8000462:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 8000464:	f003 fa70 	bl	8003948 <random>
 8000468:	4602      	mov	r2, r0
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <CharTest+0x16c>)
 800046c:	fb83 1302 	smull	r1, r3, r3, r2
 8000470:	4413      	add	r3, r2
 8000472:	13d9      	asrs	r1, r3, #15
 8000474:	17d3      	asrs	r3, r2, #31
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	460b      	mov	r3, r1
 800047a:	041b      	lsls	r3, r3, #16
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	1ad1      	subs	r1, r2, r3
 8000480:	b28b      	uxth	r3, r1
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fd40 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(RD(random() % 0xFFFF));
 8000488:	f003 fa5e 	bl	8003948 <random>
 800048c:	4602      	mov	r2, r0
 800048e:	4b21      	ldr	r3, [pc, #132]	; (8000514 <CharTest+0x16c>)
 8000490:	fb83 1302 	smull	r1, r3, r3, r2
 8000494:	4413      	add	r3, r2
 8000496:	13d9      	asrs	r1, r3, #15
 8000498:	17d3      	asrs	r3, r2, #31
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	460b      	mov	r3, r1
 800049e:	041b      	lsls	r3, r3, #16
 80004a0:	1a5b      	subs	r3, r3, r1
 80004a2:	1ad1      	subs	r1, r2, r3
 80004a4:	b28b      	uxth	r3, r1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fd3e 	bl	8001f28 <BSP_LCD_SetBackColor>

    c = random() % 96 + ' ';
 80004ac:	f003 fa4c 	bl	8003948 <random>
 80004b0:	4602      	mov	r2, r0
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <CharTest+0x170>)
 80004b4:	fb83 1302 	smull	r1, r3, r3, r2
 80004b8:	1119      	asrs	r1, r3, #4
 80004ba:	17d3      	asrs	r3, r2, #31
 80004bc:	1ac9      	subs	r1, r1, r3
 80004be:	460b      	mov	r3, r1
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	440b      	add	r3, r1
 80004c4:	015b      	lsls	r3, r3, #5
 80004c6:	1ad1      	subs	r1, r2, r3
 80004c8:	b2cb      	uxtb	r3, r1
 80004ca:	3320      	adds	r3, #32
 80004cc:	75fb      	strb	r3, [r7, #23]
    BSP_LCD_DisplayChar(x, y, c);
 80004ce:	7dfa      	ldrb	r2, [r7, #23]
 80004d0:	89b9      	ldrh	r1, [r7, #12]
 80004d2:	89fb      	ldrh	r3, [r7, #14]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 fd6d 	bl	8001fb4 <BSP_LCD_DisplayChar>
  for(uint32_t i = 0; i < n; i++)
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	3301      	adds	r3, #1
 80004de:	61fb      	str	r3, [r7, #28]
 80004e0:	69fa      	ldr	r2, [r7, #28]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	f4ff af69 	bcc.w	80003bc <CharTest+0x14>
  }
  return(GetTime() - ctStartT);
 80004ea:	f002 fc73 	bl	8002dd4 <HAL_GetTick>
 80004ee:	4602      	mov	r2, r0
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	1ad3      	subs	r3, r2, r3
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3724      	adds	r7, #36	; 0x24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	66666667 	.word	0x66666667
 8000500:	20000020 	.word	0x20000020
 8000504:	20000000 	.word	0x20000000
 8000508:	20000008 	.word	0x20000008
 800050c:	20000010 	.word	0x20000010
 8000510:	20000018 	.word	0x20000018
 8000514:	80008001 	.word	0x80008001
 8000518:	2aaaaaab 	.word	0x2aaaaaab

0800051c <CircleTest>:

//-----------------------------------------------------------------------------
uint32_t CircleTest(uint32_t n)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b089      	sub	sp, #36	; 0x24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint16_t c, x, y, r, rmax;

  rmax = BSP_LCD_GetXSize();
 8000524:	f001 fcd8 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000528:	4603      	mov	r3, r0
 800052a:	83fb      	strh	r3, [r7, #30]
  if(rmax > BSP_LCD_GetYSize())
 800052c:	f001 fce0 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	8bfb      	ldrh	r3, [r7, #30]
 8000536:	4293      	cmp	r3, r2
 8000538:	d903      	bls.n	8000542 <CircleTest+0x26>
    rmax = BSP_LCD_GetYSize();
 800053a:	f001 fcd9 	bl	8001ef0 <BSP_LCD_GetYSize>
 800053e:	4603      	mov	r3, r0
 8000540:	83fb      	strh	r3, [r7, #30]
  rmax >>= 2;
 8000542:	8bfb      	ldrh	r3, [r7, #30]
 8000544:	089b      	lsrs	r3, r3, #2
 8000546:	83fb      	strh	r3, [r7, #30]

  uint32_t ctStartT = GetTime();
 8000548:	f002 fc44 	bl	8002dd4 <HAL_GetTick>
 800054c:	6178      	str	r0, [r7, #20]
  for(uint32_t i = 0; i < n; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
 8000552:	e04f      	b.n	80005f4 <CircleTest+0xd8>
  {
    do
      r = random() % rmax;
 8000554:	f003 f9f8 	bl	8003948 <random>
 8000558:	4602      	mov	r2, r0
 800055a:	8bfb      	ldrh	r3, [r7, #30]
 800055c:	fb92 f1f3 	sdiv	r1, r2, r3
 8000560:	fb03 f301 	mul.w	r3, r3, r1
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	827b      	strh	r3, [r7, #18]
    while(r == 0);
 8000568:	8a7b      	ldrh	r3, [r7, #18]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f2      	beq.n	8000554 <CircleTest+0x38>

    x = random() % (BSP_LCD_GetXSize() - (r << 1)) + r;
 800056e:	f003 f9eb 	bl	8003948 <random>
 8000572:	4604      	mov	r4, r0
 8000574:	f001 fcb0 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	8a7b      	ldrh	r3, [r7, #18]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	fb94 f2f3 	sdiv	r2, r4, r3
 8000586:	fb03 f302 	mul.w	r3, r3, r2
 800058a:	1ae3      	subs	r3, r4, r3
 800058c:	b29a      	uxth	r2, r3
 800058e:	8a7b      	ldrh	r3, [r7, #18]
 8000590:	4413      	add	r3, r2
 8000592:	823b      	strh	r3, [r7, #16]
    y = random() % (BSP_LCD_GetYSize() - (r << 1)) + r;
 8000594:	f003 f9d8 	bl	8003948 <random>
 8000598:	4604      	mov	r4, r0
 800059a:	f001 fca9 	bl	8001ef0 <BSP_LCD_GetYSize>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	8a7b      	ldrh	r3, [r7, #18]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	fb94 f2f3 	sdiv	r2, r4, r3
 80005ac:	fb03 f302 	mul.w	r3, r3, r2
 80005b0:	1ae3      	subs	r3, r4, r3
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	8a7b      	ldrh	r3, [r7, #18]
 80005b6:	4413      	add	r3, r2
 80005b8:	81fb      	strh	r3, [r7, #14]
    c = random() % 0xFFFF;
 80005ba:	f003 f9c5 	bl	8003948 <random>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <CircleTest+0xf4>)
 80005c2:	fb83 1302 	smull	r1, r3, r3, r2
 80005c6:	4413      	add	r3, r2
 80005c8:	13d9      	asrs	r1, r3, #15
 80005ca:	17d3      	asrs	r3, r2, #31
 80005cc:	1ac9      	subs	r1, r1, r3
 80005ce:	460b      	mov	r3, r1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	1a5b      	subs	r3, r3, r1
 80005d4:	1ad1      	subs	r1, r2, r3
 80005d6:	460b      	mov	r3, r1
 80005d8:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(c));
 80005da:	89bb      	ldrh	r3, [r7, #12]
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fc93 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(x, y, r);
 80005e2:	8a7a      	ldrh	r2, [r7, #18]
 80005e4:	89f9      	ldrh	r1, [r7, #14]
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fe5f 	bl	80022ac <BSP_LCD_DrawCircle>
  for(uint32_t i = 0; i < n; i++)
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	3301      	adds	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3ab      	bcc.n	8000554 <CircleTest+0x38>
  }
  return(GetTime() - ctStartT);
 80005fc:	f002 fbea 	bl	8002dd4 <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	1ad3      	subs	r3, r2, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	3724      	adds	r7, #36	; 0x24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd90      	pop	{r4, r7, pc}
 800060e:	bf00      	nop
 8000610:	80008001 	.word	0x80008001

08000614 <FillCircleTest>:

//-----------------------------------------------------------------------------
uint32_t FillCircleTest(uint32_t n)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint16_t c, x, y, r, rmax;

  rmax = BSP_LCD_GetXSize();
 800061c:	f001 fc5c 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000620:	4603      	mov	r3, r0
 8000622:	83fb      	strh	r3, [r7, #30]
  if(rmax > BSP_LCD_GetYSize())
 8000624:	f001 fc64 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	8bfb      	ldrh	r3, [r7, #30]
 800062e:	4293      	cmp	r3, r2
 8000630:	d903      	bls.n	800063a <FillCircleTest+0x26>
    rmax = BSP_LCD_GetYSize();
 8000632:	f001 fc5d 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000636:	4603      	mov	r3, r0
 8000638:	83fb      	strh	r3, [r7, #30]
  rmax >>= 2;
 800063a:	8bfb      	ldrh	r3, [r7, #30]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	83fb      	strh	r3, [r7, #30]

  uint32_t ctStartT = GetTime();
 8000640:	f002 fbc8 	bl	8002dd4 <HAL_GetTick>
 8000644:	6178      	str	r0, [r7, #20]
  for(uint32_t i = 0; i < n; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	e04f      	b.n	80006ec <FillCircleTest+0xd8>
  {
    do
      r = random() % rmax;
 800064c:	f003 f97c 	bl	8003948 <random>
 8000650:	4602      	mov	r2, r0
 8000652:	8bfb      	ldrh	r3, [r7, #30]
 8000654:	fb92 f1f3 	sdiv	r1, r2, r3
 8000658:	fb03 f301 	mul.w	r3, r3, r1
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	827b      	strh	r3, [r7, #18]
    while(r == 0);
 8000660:	8a7b      	ldrh	r3, [r7, #18]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f2      	beq.n	800064c <FillCircleTest+0x38>

    x = random() % (BSP_LCD_GetXSize() - (r << 1)) + r;
 8000666:	f003 f96f 	bl	8003948 <random>
 800066a:	4604      	mov	r4, r0
 800066c:	f001 fc34 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	8a7b      	ldrh	r3, [r7, #18]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	fb94 f2f3 	sdiv	r2, r4, r3
 800067e:	fb03 f302 	mul.w	r3, r3, r2
 8000682:	1ae3      	subs	r3, r4, r3
 8000684:	b29a      	uxth	r2, r3
 8000686:	8a7b      	ldrh	r3, [r7, #18]
 8000688:	4413      	add	r3, r2
 800068a:	823b      	strh	r3, [r7, #16]
    y = random() % (BSP_LCD_GetYSize() - (r << 1)) + r;
 800068c:	f003 f95c 	bl	8003948 <random>
 8000690:	4604      	mov	r4, r0
 8000692:	f001 fc2d 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	8a7b      	ldrh	r3, [r7, #18]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	fb94 f2f3 	sdiv	r2, r4, r3
 80006a4:	fb03 f302 	mul.w	r3, r3, r2
 80006a8:	1ae3      	subs	r3, r4, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	8a7b      	ldrh	r3, [r7, #18]
 80006ae:	4413      	add	r3, r2
 80006b0:	81fb      	strh	r3, [r7, #14]
    c = random() % 0xFFFF;
 80006b2:	f003 f949 	bl	8003948 <random>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <FillCircleTest+0xf4>)
 80006ba:	fb83 1302 	smull	r1, r3, r3, r2
 80006be:	4413      	add	r3, r2
 80006c0:	13d9      	asrs	r1, r3, #15
 80006c2:	17d3      	asrs	r3, r2, #31
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	1a5b      	subs	r3, r3, r1
 80006cc:	1ad1      	subs	r1, r2, r3
 80006ce:	460b      	mov	r3, r1
 80006d0:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(c));
 80006d2:	89bb      	ldrh	r3, [r7, #12]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fc17 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(x, y, r);
 80006da:	8a7a      	ldrh	r2, [r7, #18]
 80006dc:	89f9      	ldrh	r1, [r7, #14]
 80006de:	8a3b      	ldrh	r3, [r7, #16]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 ff19 	bl	8002518 <BSP_LCD_FillCircle>
  for(uint32_t i = 0; i < n; i++)
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	3301      	adds	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
 80006ec:	69ba      	ldr	r2, [r7, #24]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d3ab      	bcc.n	800064c <FillCircleTest+0x38>
  }
  return(GetTime() - ctStartT);
 80006f4:	f002 fb6e 	bl	8002dd4 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	1ad3      	subs	r3, r2, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	bf00      	nop
 8000708:	80008001 	.word	0x80008001

0800070c <ColorTest>:

//-----------------------------------------------------------------------------
uint32_t ColorTest(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
  uint16_t c_rgb565, xs, ys;
  uint8_t  cy;

  uint32_t ctStartT = GetTime();
 8000712:	f002 fb5f 	bl	8002dd4 <HAL_GetTick>
 8000716:	60b8      	str	r0, [r7, #8]
  xs = BSP_LCD_GetXSize();
 8000718:	f001 fbde 	bl	8001ed8 <BSP_LCD_GetXSize>
 800071c:	4603      	mov	r3, r0
 800071e:	80fb      	strh	r3, [r7, #6]
  ys = BSP_LCD_GetYSize();
 8000720:	f001 fbe6 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000724:	4603      	mov	r3, r0
 8000726:	80bb      	strh	r3, [r7, #4]
  for(uint16_t x = 0; x < xs; x++)
 8000728:	2300      	movs	r3, #0
 800072a:	81fb      	strh	r3, [r7, #14]
 800072c:	e06d      	b.n	800080a <ColorTest+0xfe>
  {
    cy = (uint32_t)(x << 8) / xs;
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	461a      	mov	r2, r3
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	70fb      	strb	r3, [r7, #3]
    c_rgb565 = RGB888TORGB565(cy, cy, cy);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	b21b      	sxth	r3, r3
 8000742:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000746:	f023 0307 	bic.w	r3, r3, #7
 800074a:	b21a      	sxth	r2, r3
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	b21b      	sxth	r3, r3
 8000752:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b21a      	sxth	r2, r3
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21b      	sxth	r3, r3
 8000768:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 800076a:	883b      	ldrh	r3, [r7, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fbcb 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, 0, ys >> 2);
 8000772:	88bb      	ldrh	r3, [r7, #4]
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	b29a      	uxth	r2, r3
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fc99 	bl	80020b4 <BSP_LCD_DrawVLine>

    c_rgb565 = RGB888TORGB565(cy, 0, 0);
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800078c:	f023 0307 	bic.w	r3, r3, #7
 8000790:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fbb7 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, ys >> 2, ys >> 2);
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	b299      	uxth	r1, r3
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fc83 	bl	80020b4 <BSP_LCD_DrawVLine>

    c_rgb565 = RGB888TORGB565(0, cy, 0);
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80007b8:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 80007ba:	883b      	ldrh	r3, [r7, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 fba3 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, ys >> 1, ys >> 2);
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	b299      	uxth	r1, r3
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fc6f 	bl	80020b4 <BSP_LCD_DrawVLine>

    c_rgb565 = RGB888TORGB565(0, 0, cy);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 80007de:	883b      	ldrh	r3, [r7, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fb91 	bl	8001f08 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, (ys >> 1) + (ys >> 2), ys >> 2);
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	88bb      	ldrh	r3, [r7, #4]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4413      	add	r3, r2
 80007f4:	b299      	uxth	r1, r3
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fc58 	bl	80020b4 <BSP_LCD_DrawVLine>
  for(uint16_t x = 0; x < xs; x++)
 8000804:	89fb      	ldrh	r3, [r7, #14]
 8000806:	3301      	adds	r3, #1
 8000808:	81fb      	strh	r3, [r7, #14]
 800080a:	89fa      	ldrh	r2, [r7, #14]
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	429a      	cmp	r2, r3
 8000810:	d38d      	bcc.n	800072e <ColorTest+0x22>
  }
  return(GetTime() - ctStartT);
 8000812:	f002 fadf 	bl	8002dd4 <HAL_GetTick>
 8000816:	4602      	mov	r2, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1ad3      	subs	r3, r2, r3
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <BitmapTest>:

//-----------------------------------------------------------------------------
#if BITMAP_TEST == 1
uint32_t BitmapTest(uint32_t n)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  extern const BITMAPSTRUCT beer_60x100_16;
  uint16_t x, y;

  uint32_t ctStartT = GetTime();
 800082c:	f002 fad2 	bl	8002dd4 <HAL_GetTick>
 8000830:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e02c      	b.n	8000892 <BitmapTest+0x6e>
  {
    x = random() % (BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth);
 8000838:	f003 f886 	bl	8003948 <random>
 800083c:	4603      	mov	r3, r0
 800083e:	461c      	mov	r4, r3
 8000840:	f001 fb4a 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <BitmapTest+0x88>)
 800084a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	fbb4 f2f3 	udiv	r2, r4, r3
 8000854:	fb03 f302 	mul.w	r3, r3, r2
 8000858:	1ae3      	subs	r3, r4, r3
 800085a:	81fb      	strh	r3, [r7, #14]
    y = random() % (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight);
 800085c:	f003 f874 	bl	8003948 <random>
 8000860:	4603      	mov	r3, r0
 8000862:	461c      	mov	r4, r3
 8000864:	f001 fb44 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <BitmapTest+0x88>)
 800086e:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	fbb4 f2f3 	udiv	r2, r4, r3
 8000878:	fb03 f302 	mul.w	r3, r3, r2
 800087c:	1ae3      	subs	r3, r4, r3
 800087e:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_DrawBitmap(x, y, (uint8_t *)&rombitmap);
 8000880:	89b9      	ldrh	r1, [r7, #12]
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <BitmapTest+0x88>)
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fdc8 	bl	800241c <BSP_LCD_DrawBitmap>
  for(uint32_t i = 0; i < n; i++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	d3ce      	bcc.n	8000838 <BitmapTest+0x14>
  }
  return(GetTime() - ctStartT);
 800089a:	f002 fa9b 	bl	8002dd4 <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	1ad3      	subs	r3, r2, r3
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	08004b18 	.word	0x08004b18

080008b0 <ScrollTest>:

//-----------------------------------------------------------------------------
uint32_t ScrollTest(uint32_t n)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t t;
  uint16_t ss, o, tf, bf;
  int16_t  i;
  ss = BSP_LCD_GetXSize();
 80008b8:	f001 fb0e 	bl	8001ed8 <BSP_LCD_GetXSize>
 80008bc:	4603      	mov	r3, r0
 80008be:	827b      	strh	r3, [r7, #18]
  o = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	823b      	strh	r3, [r7, #16]
  if(BSP_LCD_GetYSize() > ss)
 80008c4:	f001 fb14 	bl	8001ef0 <BSP_LCD_GetYSize>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	8a7b      	ldrh	r3, [r7, #18]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d205      	bcs.n	80008de <ScrollTest+0x2e>
  {
    ss = BSP_LCD_GetYSize();
 80008d2:	f001 fb0d 	bl	8001ef0 <BSP_LCD_GetYSize>
 80008d6:	4603      	mov	r3, r0
 80008d8:	827b      	strh	r3, [r7, #18]
    o = 1;                              /* vertical display */
 80008da:	2301      	movs	r3, #1
 80008dc:	823b      	strh	r3, [r7, #16]
  }
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80008de:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80008e2:	f001 fb11 	bl	8001f08 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80008e6:	201f      	movs	r0, #31
 80008e8:	f001 fb1e 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 80008ec:	48b7      	ldr	r0, [pc, #732]	; (8000bcc <ScrollTest+0x31c>)
 80008ee:	f001 fb2b 	bl	8001f48 <BSP_LCD_SetFont>
  BSP_LCD_DisplayChar(0, 0, '1');
 80008f2:	2231      	movs	r2, #49	; 0x31
 80008f4:	2100      	movs	r1, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f001 fb5c 	bl	8001fb4 <BSP_LCD_DisplayChar>
  BSP_LCD_DisplayChar(BSP_LCD_GetXSize() - 8, 0, '2');
 80008fc:	f001 faec 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000900:	4603      	mov	r3, r0
 8000902:	3b08      	subs	r3, #8
 8000904:	b29b      	uxth	r3, r3
 8000906:	2232      	movs	r2, #50	; 0x32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fb52 	bl	8001fb4 <BSP_LCD_DisplayChar>

  BSP_LCD_SetFont(&Font16);
 8000910:	48af      	ldr	r0, [pc, #700]	; (8000bd0 <ScrollTest+0x320>)
 8000912:	f001 fb19 	bl	8001f48 <BSP_LCD_SetFont>
  BSP_LCD_DisplayChar(0, BSP_LCD_GetYSize() - 16, '3');
 8000916:	f001 faeb 	bl	8001ef0 <BSP_LCD_GetYSize>
 800091a:	4603      	mov	r3, r0
 800091c:	3b10      	subs	r3, #16
 800091e:	b29b      	uxth	r3, r3
 8000920:	2233      	movs	r2, #51	; 0x33
 8000922:	4619      	mov	r1, r3
 8000924:	2000      	movs	r0, #0
 8000926:	f001 fb45 	bl	8001fb4 <BSP_LCD_DisplayChar>
  BSP_LCD_DisplayChar(BSP_LCD_GetXSize() - 12, BSP_LCD_GetYSize() - 16, '4');
 800092a:	f001 fad5 	bl	8001ed8 <BSP_LCD_GetXSize>
 800092e:	4603      	mov	r3, r0
 8000930:	3b0c      	subs	r3, #12
 8000932:	b29c      	uxth	r4, r3
 8000934:	f001 fadc 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000938:	4603      	mov	r3, r0
 800093a:	3b10      	subs	r3, #16
 800093c:	b29b      	uxth	r3, r3
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	4619      	mov	r1, r3
 8000942:	4620      	mov	r0, r4
 8000944:	f001 fb36 	bl	8001fb4 <BSP_LCD_DisplayChar>
  if(o == 0)
 8000948:	8a3b      	ldrh	r3, [r7, #16]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d120      	bne.n	8000990 <ScrollTest+0xe0>
  { /* horizontal display */
    tf = 12; bf = 16;
 800094e:	230c      	movs	r3, #12
 8000950:	81fb      	strh	r3, [r7, #14]
 8000952:	2310      	movs	r3, #16
 8000954:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_DrawBitmap(tf, (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight) / 2, (uint8_t *)&rombitmap);
 8000956:	f001 facb 	bl	8001ef0 <BSP_LCD_GetYSize>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b9d      	ldr	r3, [pc, #628]	; (8000bd4 <ScrollTest+0x324>)
 8000960:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	b299      	uxth	r1, r3
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	4a99      	ldr	r2, [pc, #612]	; (8000bd4 <ScrollTest+0x324>)
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fd54 	bl	800241c <BSP_LCD_DrawBitmap>
    ss -= (tf + bf + rombitmap.infoHeader.biWidth);
 8000974:	89fa      	ldrh	r2, [r7, #14]
 8000976:	89bb      	ldrh	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b95      	ldr	r3, [pc, #596]	; (8000bd4 <ScrollTest+0x324>)
 800097e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	8a7a      	ldrh	r2, [r7, #18]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	827b      	strh	r3, [r7, #18]
 800098e:	e01f      	b.n	80009d0 <ScrollTest+0x120>
  }
  else
  { /* vertical display */
    tf = 12; bf = 16;
 8000990:	230c      	movs	r3, #12
 8000992:	81fb      	strh	r3, [r7, #14]
 8000994:	2310      	movs	r3, #16
 8000996:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth) / 2, tf, (uint8_t *)&rombitmap);
 8000998:	f001 fa9e 	bl	8001ed8 <BSP_LCD_GetXSize>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b8c      	ldr	r3, [pc, #560]	; (8000bd4 <ScrollTest+0x324>)
 80009a2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	89f9      	ldrh	r1, [r7, #14]
 80009ae:	4a89      	ldr	r2, [pc, #548]	; (8000bd4 <ScrollTest+0x324>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fd33 	bl	800241c <BSP_LCD_DrawBitmap>
    ss -= (tf + bf + rombitmap.infoHeader.biHeight);
 80009b6:	89fa      	ldrh	r2, [r7, #14]
 80009b8:	89bb      	ldrh	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b85      	ldr	r3, [pc, #532]	; (8000bd4 <ScrollTest+0x324>)
 80009c0:	f8d3 3016 	ldr.w	r3, [r3, #22]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	8a7a      	ldrh	r2, [r7, #18]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	827b      	strh	r3, [r7, #18]
  }
  t = GetTime();
 80009d0:	f002 fa00 	bl	8002dd4 <HAL_GetTick>
 80009d4:	6178      	str	r0, [r7, #20]
  i = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	817b      	strh	r3, [r7, #10]
  while(i < ss)
 80009da:	e017      	b.n	8000a0c <ScrollTest+0x15c>
  {
    while(GetTime() < (t + 20));
 80009dc:	bf00      	nop
 80009de:	f002 f9f9 	bl	8002dd4 <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3314      	adds	r3, #20
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d3f8      	bcc.n	80009de <ScrollTest+0x12e>
    t = GetTime();
 80009ec:	f002 f9f2 	bl	8002dd4 <HAL_GetTick>
 80009f0:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 80009f2:	89ba      	ldrh	r2, [r7, #12]
 80009f4:	89f9      	ldrh	r1, [r7, #14]
 80009f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 ffb0 	bl	8002960 <BSP_LCD_Scroll>
    i++;
 8000a00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3301      	adds	r3, #1
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	817b      	strh	r3, [r7, #10]
  while(i < ss)
 8000a0c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a10:	8a7b      	ldrh	r3, [r7, #18]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dbe2      	blt.n	80009dc <ScrollTest+0x12c>
  }
  do
  {
    i--;
 8000a16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	817b      	strh	r3, [r7, #10]
    while(GetTime() < t + 20);
 8000a22:	bf00      	nop
 8000a24:	f002 f9d6 	bl	8002dd4 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3314      	adds	r3, #20
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d3f8      	bcc.n	8000a24 <ScrollTest+0x174>
    t = GetTime();
 8000a32:	f002 f9cf 	bl	8002dd4 <HAL_GetTick>
 8000a36:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000a38:	89ba      	ldrh	r2, [r7, #12]
 8000a3a:	89f9      	ldrh	r1, [r7, #14]
 8000a3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 ff8d 	bl	8002960 <BSP_LCD_Scroll>
  } while(i > 0);
 8000a46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dce3      	bgt.n	8000a16 <ScrollTest+0x166>

  while(GetTime() < t + 1000);
 8000a4e:	bf00      	nop
 8000a50:	f002 f9c0 	bl	8002dd4 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3f7      	bcc.n	8000a50 <ScrollTest+0x1a0>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 fa51 	bl	8001f08 <BSP_LCD_SetTextColor>
  if(o == 0)
 8000a66:	8a3b      	ldrh	r3, [r7, #16]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d131      	bne.n	8000ad0 <ScrollTest+0x220>
  { /* horizontal display */
    BSP_LCD_FillRect(tf, (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight) / 2, rombitmap.infoHeader.biWidth, rombitmap.infoHeader.biHeight);
 8000a6c:	f001 fa40 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <ScrollTest+0x324>)
 8000a76:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	085b      	lsrs	r3, r3, #1
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	4b54      	ldr	r3, [pc, #336]	; (8000bd4 <ScrollTest+0x324>)
 8000a82:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <ScrollTest+0x324>)
 8000a8a:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	89f8      	ldrh	r0, [r7, #14]
 8000a92:	f001 fd1d 	bl	80024d0 <BSP_LCD_FillRect>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth - bf, (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight) / 2, (uint8_t *)&rombitmap);
 8000a96:	f001 fa1f 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <ScrollTest+0x324>)
 8000aa0:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	89bb      	ldrh	r3, [r7, #12]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	b29c      	uxth	r4, r3
 8000ab0:	f001 fa1e 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <ScrollTest+0x324>)
 8000aba:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	085b      	lsrs	r3, r3, #1
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <ScrollTest+0x324>)
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f001 fca7 	bl	800241c <BSP_LCD_DrawBitmap>
 8000ace:	e030      	b.n	8000b32 <ScrollTest+0x282>
  }
  else
  { /* vertical display */
    BSP_LCD_FillRect((BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth) / 2, tf, rombitmap.infoHeader.biWidth, rombitmap.infoHeader.biHeight);
 8000ad0:	f001 fa02 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <ScrollTest+0x324>)
 8000ada:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	085b      	lsrs	r3, r3, #1
 8000ae2:	b298      	uxth	r0, r3
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <ScrollTest+0x324>)
 8000ae6:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <ScrollTest+0x324>)
 8000aee:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	89f9      	ldrh	r1, [r7, #14]
 8000af6:	f001 fceb 	bl	80024d0 <BSP_LCD_FillRect>
    BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth) / 2, BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight - bf, (uint8_t *)&rombitmap);
 8000afa:	f001 f9ed 	bl	8001ed8 <BSP_LCD_GetXSize>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <ScrollTest+0x324>)
 8000b04:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	b29c      	uxth	r4, r3
 8000b0e:	f001 f9ef 	bl	8001ef0 <BSP_LCD_GetYSize>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <ScrollTest+0x324>)
 8000b18:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4a2a      	ldr	r2, [pc, #168]	; (8000bd4 <ScrollTest+0x324>)
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f001 fc75 	bl	800241c <BSP_LCD_DrawBitmap>
  }
  t = GetTime();
 8000b32:	f002 f94f 	bl	8002dd4 <HAL_GetTick>
 8000b36:	6178      	str	r0, [r7, #20]
  i = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	817b      	strh	r3, [r7, #10]
  while(i > 0 - ss)
 8000b3c:	e017      	b.n	8000b6e <ScrollTest+0x2be>
  {
    while(GetTime() < (t + 20));
 8000b3e:	bf00      	nop
 8000b40:	f002 f948 	bl	8002dd4 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3314      	adds	r3, #20
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d3f8      	bcc.n	8000b40 <ScrollTest+0x290>
    t = GetTime();
 8000b4e:	f002 f941 	bl	8002dd4 <HAL_GetTick>
 8000b52:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000b54:	89ba      	ldrh	r2, [r7, #12]
 8000b56:	89f9      	ldrh	r1, [r7, #14]
 8000b58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 feff 	bl	8002960 <BSP_LCD_Scroll>
    i--;
 8000b62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	817b      	strh	r3, [r7, #10]
  while(i > 0 - ss)
 8000b6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b72:	8a7b      	ldrh	r3, [r7, #18]
 8000b74:	425b      	negs	r3, r3
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dce1      	bgt.n	8000b3e <ScrollTest+0x28e>
  }
  do
  {
    i++;
 8000b7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3301      	adds	r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	817b      	strh	r3, [r7, #10]
    while(GetTime() < t + 20);
 8000b86:	bf00      	nop
 8000b88:	f002 f924 	bl	8002dd4 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3314      	adds	r3, #20
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3f8      	bcc.n	8000b88 <ScrollTest+0x2d8>
    t = GetTime();
 8000b96:	f002 f91d 	bl	8002dd4 <HAL_GetTick>
 8000b9a:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000b9c:	89ba      	ldrh	r2, [r7, #12]
 8000b9e:	89f9      	ldrh	r1, [r7, #14]
 8000ba0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fedb 	bl	8002960 <BSP_LCD_Scroll>
  } while(i < 0);
 8000baa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dbe3      	blt.n	8000b7a <ScrollTest+0x2ca>

  while(GetTime() < t + 1000);
 8000bb2:	bf00      	nop
 8000bb4:	f002 f90e 	bl	8002dd4 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3f7      	bcc.n	8000bb4 <ScrollTest+0x304>

  i = -500;
 8000bc4:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8000bc8:	817b      	strh	r3, [r7, #10]
  while(i < 500)
 8000bca:	e01d      	b.n	8000c08 <ScrollTest+0x358>
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	08004b18 	.word	0x08004b18
  {
    while(GetTime() < t + 10);
 8000bd8:	bf00      	nop
 8000bda:	f002 f8fb 	bl	8002dd4 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	330a      	adds	r3, #10
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3f8      	bcc.n	8000bda <ScrollTest+0x32a>
    t = GetTime();
 8000be8:	f002 f8f4 	bl	8002dd4 <HAL_GetTick>
 8000bec:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000bee:	89ba      	ldrh	r2, [r7, #12]
 8000bf0:	89f9      	ldrh	r1, [r7, #14]
 8000bf2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 feb2 	bl	8002960 <BSP_LCD_Scroll>
    i++;
 8000bfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	817b      	strh	r3, [r7, #10]
  while(i < 500)
 8000c08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c10:	dbe2      	blt.n	8000bd8 <ScrollTest+0x328>
  }

  while(GetTime() < t + 1000);
 8000c12:	bf00      	nop
 8000c14:	f002 f8de 	bl	8002dd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3f7      	bcc.n	8000c14 <ScrollTest+0x364>
  BSP_LCD_Scroll(0, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f001 fe99 	bl	8002960 <BSP_LCD_Scroll>
  return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <ReadPixelTest>:

//-----------------------------------------------------------------------------
#if READ_TEST == 1
uint32_t ReadPixelTest(uint32_t n)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08b      	sub	sp, #44	; 0x2c
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	6078      	str	r0, [r7, #4]
  uint16_t x, y, x0, y0, xsize, ysize;
  uint32_t error = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]

  x0 = 20;
 8000c44:	2314      	movs	r3, #20
 8000c46:	82fb      	strh	r3, [r7, #22]
  y0 =  5;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	82bb      	strh	r3, [r7, #20]
  xsize = rombitmap.infoHeader.biWidth;
 8000c4c:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <ReadPixelTest+0x134>)
 8000c4e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000c52:	827b      	strh	r3, [r7, #18]
  ysize = rombitmap.infoHeader.biHeight;
 8000c54:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <ReadPixelTest+0x134>)
 8000c56:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000c5a:	823b      	strh	r3, [r7, #16]

  /* Draw bitmap */
  BSP_LCD_DrawBitmap(x0, y0, (uint8_t *)&rombitmap);
 8000c5c:	8ab9      	ldrh	r1, [r7, #20]
 8000c5e:	8afb      	ldrh	r3, [r7, #22]
 8000c60:	4a42      	ldr	r2, [pc, #264]	; (8000d6c <ReadPixelTest+0x134>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fbda 	bl	800241c <BSP_LCD_DrawBitmap>

  /* Read bitmap (BSP_LCD_ReadPixel) */
  uint32_t ctStartT = GetTime();
 8000c68:	f002 f8b4 	bl	8002dd4 <HAL_GetTick>
 8000c6c:	60f8      	str	r0, [r7, #12]
  while(n--)
 8000c6e:	e028      	b.n	8000cc2 <ReadPixelTest+0x8a>
    for(y = 0; y < ysize; y++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	83bb      	strh	r3, [r7, #28]
 8000c74:	e021      	b.n	8000cba <ReadPixelTest+0x82>
      for(x = 0; x < xsize; x++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	83fb      	strh	r3, [r7, #30]
 8000c7a:	e017      	b.n	8000cac <ReadPixelTest+0x74>
        bitmap[y * xsize + x] = BSP_LCD_ReadPixel(x0 + x, y0 + y);
 8000c7c:	8afa      	ldrh	r2, [r7, #22]
 8000c7e:	8bfb      	ldrh	r3, [r7, #30]
 8000c80:	4413      	add	r3, r2
 8000c82:	b298      	uxth	r0, r3
 8000c84:	8aba      	ldrh	r2, [r7, #20]
 8000c86:	8bbb      	ldrh	r3, [r7, #28]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	8bbb      	ldrh	r3, [r7, #28]
 8000c8e:	8a7a      	ldrh	r2, [r7, #18]
 8000c90:	fb02 f203 	mul.w	r2, r2, r3
 8000c94:	8bfb      	ldrh	r3, [r7, #30]
 8000c96:	18d4      	adds	r4, r2, r3
 8000c98:	f001 fe04 	bl	80028a4 <BSP_LCD_ReadPixel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <ReadPixelTest+0x138>)
 8000ca2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
      for(x = 0; x < xsize; x++)
 8000ca6:	8bfb      	ldrh	r3, [r7, #30]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	83fb      	strh	r3, [r7, #30]
 8000cac:	8bfa      	ldrh	r2, [r7, #30]
 8000cae:	8a7b      	ldrh	r3, [r7, #18]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3e3      	bcc.n	8000c7c <ReadPixelTest+0x44>
    for(y = 0; y < ysize; y++)
 8000cb4:	8bbb      	ldrh	r3, [r7, #28]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	83bb      	strh	r3, [r7, #28]
 8000cba:	8bba      	ldrh	r2, [r7, #28]
 8000cbc:	8a3b      	ldrh	r3, [r7, #16]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3d9      	bcc.n	8000c76 <ReadPixelTest+0x3e>
  while(n--)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1d1      	bne.n	8000c70 <ReadPixelTest+0x38>
  ctStartT = GetTime() - ctStartT;
 8000ccc:	f002 f882 	bl	8002dd4 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	60fb      	str	r3, [r7, #12]

  /* Check the read error */
  for(y = 0; y < ysize; y++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	83bb      	strh	r3, [r7, #28]
 8000cdc:	e029      	b.n	8000d32 <ReadPixelTest+0xfa>
    for(x = 0; x < xsize; x++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	83fb      	strh	r3, [r7, #30]
 8000ce2:	e01f      	b.n	8000d24 <ReadPixelTest+0xec>
    {
      if(bitmap[y * xsize + x] != rombitmap.data[(ysize - 1 - y) * xsize + x])
 8000ce4:	8bbb      	ldrh	r3, [r7, #28]
 8000ce6:	8a7a      	ldrh	r2, [r7, #18]
 8000ce8:	fb02 f203 	mul.w	r2, r2, r3
 8000cec:	8bfb      	ldrh	r3, [r7, #30]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <ReadPixelTest+0x138>)
 8000cf2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cf6:	8a3b      	ldrh	r3, [r7, #16]
 8000cf8:	1e59      	subs	r1, r3, #1
 8000cfa:	8bbb      	ldrh	r3, [r7, #28]
 8000cfc:	1acb      	subs	r3, r1, r3
 8000cfe:	8a79      	ldrh	r1, [r7, #18]
 8000d00:	fb01 f103 	mul.w	r1, r1, r3
 8000d04:	8bfb      	ldrh	r3, [r7, #30]
 8000d06:	440b      	add	r3, r1
 8000d08:	4918      	ldr	r1, [pc, #96]	; (8000d6c <ReadPixelTest+0x134>)
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	440b      	add	r3, r1
 8000d10:	88db      	ldrh	r3, [r3, #6]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d002      	beq.n	8000d1e <ReadPixelTest+0xe6>
        error++;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
    for(x = 0; x < xsize; x++)
 8000d1e:	8bfb      	ldrh	r3, [r7, #30]
 8000d20:	3301      	adds	r3, #1
 8000d22:	83fb      	strh	r3, [r7, #30]
 8000d24:	8bfa      	ldrh	r2, [r7, #30]
 8000d26:	8a7b      	ldrh	r3, [r7, #18]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3db      	bcc.n	8000ce4 <ReadPixelTest+0xac>
  for(y = 0; y < ysize; y++)
 8000d2c:	8bbb      	ldrh	r3, [r7, #28]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	83bb      	strh	r3, [r7, #28]
 8000d32:	8bba      	ldrh	r2, [r7, #28]
 8000d34:	8a3b      	ldrh	r3, [r7, #16]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d3d1      	bcc.n	8000cde <ReadPixelTest+0xa6>
    }

  if(error)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <ReadPixelTest+0x112>
    printf("ReadPixelTest error: %d\r\n", (int)error);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <ReadPixelTest+0x13c>)
 8000d46:	f002 fd71 	bl	800382c <iprintf>

  BSP_LCD_DrawRGB16Image(x0 + 45, y0 + 10, xsize, ysize, &bitmap[0]);
 8000d4a:	8afb      	ldrh	r3, [r7, #22]
 8000d4c:	332d      	adds	r3, #45	; 0x2d
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	8abb      	ldrh	r3, [r7, #20]
 8000d52:	330a      	adds	r3, #10
 8000d54:	b299      	uxth	r1, r3
 8000d56:	8a3b      	ldrh	r3, [r7, #16]
 8000d58:	8a7a      	ldrh	r2, [r7, #18]
 8000d5a:	4c05      	ldr	r4, [pc, #20]	; (8000d70 <ReadPixelTest+0x138>)
 8000d5c:	9400      	str	r4, [sp, #0]
 8000d5e:	f001 fdbf 	bl	80028e0 <BSP_LCD_DrawRGB16Image>
  return(ctStartT);
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3724      	adds	r7, #36	; 0x24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	08004b18 	.word	0x08004b18
 8000d70:	2000047c 	.word	0x2000047c
 8000d74:	08004978 	.word	0x08004978

08000d78 <ReadImageTest>:

//-----------------------------------------------------------------------------
uint32_t ReadImageTest(uint32_t n)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b08b      	sub	sp, #44	; 0x2c
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	6078      	str	r0, [r7, #4]
  uint16_t x, y, x0, y0, xsize, ysize;
  uint32_t error = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]

  x0 = 20;
 8000d84:	2314      	movs	r3, #20
 8000d86:	82fb      	strh	r3, [r7, #22]
  y0 =  5;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	82bb      	strh	r3, [r7, #20]
  xsize = rombitmap.infoHeader.biWidth;
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <ReadImageTest+0xf4>)
 8000d8e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000d92:	827b      	strh	r3, [r7, #18]
  ysize = rombitmap.infoHeader.biHeight;
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <ReadImageTest+0xf4>)
 8000d96:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000d9a:	823b      	strh	r3, [r7, #16]

  /* Draw bitmap */
  BSP_LCD_DrawBitmap(x0, y0, (uint8_t *)&rombitmap);
 8000d9c:	8ab9      	ldrh	r1, [r7, #20]
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <ReadImageTest+0xf4>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fb3a 	bl	800241c <BSP_LCD_DrawBitmap>

  /* Read bitmap (BSP_LCD_ReadRGB16Image) */
  uint32_t ctStartT = GetTime();
 8000da8:	f002 f814 	bl	8002dd4 <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]
  while(n--)
 8000dae:	e007      	b.n	8000dc0 <ReadImageTest+0x48>
    BSP_LCD_ReadRGB16Image(x0, y0, xsize, ysize, &bitmap[0]);
 8000db0:	8a3b      	ldrh	r3, [r7, #16]
 8000db2:	8a7a      	ldrh	r2, [r7, #18]
 8000db4:	8ab9      	ldrh	r1, [r7, #20]
 8000db6:	8af8      	ldrh	r0, [r7, #22]
 8000db8:	4c2d      	ldr	r4, [pc, #180]	; (8000e70 <ReadImageTest+0xf8>)
 8000dba:	9400      	str	r4, [sp, #0]
 8000dbc:	f001 fdb0 	bl	8002920 <BSP_LCD_ReadRGB16Image>
  while(n--)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	1e5a      	subs	r2, r3, #1
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f2      	bne.n	8000db0 <ReadImageTest+0x38>
  ctStartT = GetTime() - ctStartT;
 8000dca:	f002 f803 	bl	8002dd4 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Check the read error */
  for(y = 0; y < ysize; y++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	83bb      	strh	r3, [r7, #28]
 8000dda:	e029      	b.n	8000e30 <ReadImageTest+0xb8>
    for(x = 0; x < xsize; x++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	83fb      	strh	r3, [r7, #30]
 8000de0:	e01f      	b.n	8000e22 <ReadImageTest+0xaa>
    {
      if(bitmap[y * xsize + x] != rombitmap.data[(ysize - 1 - y) * xsize + x])
 8000de2:	8bbb      	ldrh	r3, [r7, #28]
 8000de4:	8a7a      	ldrh	r2, [r7, #18]
 8000de6:	fb02 f203 	mul.w	r2, r2, r3
 8000dea:	8bfb      	ldrh	r3, [r7, #30]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <ReadImageTest+0xf8>)
 8000df0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000df4:	8a3b      	ldrh	r3, [r7, #16]
 8000df6:	1e59      	subs	r1, r3, #1
 8000df8:	8bbb      	ldrh	r3, [r7, #28]
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	8a79      	ldrh	r1, [r7, #18]
 8000dfe:	fb01 f103 	mul.w	r1, r1, r3
 8000e02:	8bfb      	ldrh	r3, [r7, #30]
 8000e04:	440b      	add	r3, r1
 8000e06:	4919      	ldr	r1, [pc, #100]	; (8000e6c <ReadImageTest+0xf4>)
 8000e08:	3318      	adds	r3, #24
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	440b      	add	r3, r1
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d002      	beq.n	8000e1c <ReadImageTest+0xa4>
        error++;
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
    for(x = 0; x < xsize; x++)
 8000e1c:	8bfb      	ldrh	r3, [r7, #30]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	83fb      	strh	r3, [r7, #30]
 8000e22:	8bfa      	ldrh	r2, [r7, #30]
 8000e24:	8a7b      	ldrh	r3, [r7, #18]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d3db      	bcc.n	8000de2 <ReadImageTest+0x6a>
  for(y = 0; y < ysize; y++)
 8000e2a:	8bbb      	ldrh	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	83bb      	strh	r3, [r7, #28]
 8000e30:	8bba      	ldrh	r2, [r7, #28]
 8000e32:	8a3b      	ldrh	r3, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3d1      	bcc.n	8000ddc <ReadImageTest+0x64>
    }

  if(error)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d004      	beq.n	8000e48 <ReadImageTest+0xd0>
    printf("ReadImageTest error: %d\r\n", (int)error);
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4619      	mov	r1, r3
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <ReadImageTest+0xfc>)
 8000e44:	f002 fcf2 	bl	800382c <iprintf>

  BSP_LCD_DrawRGB16Image(x0 - 15, y0 + 20, xsize, ysize, &bitmap[0]);
 8000e48:	8afb      	ldrh	r3, [r7, #22]
 8000e4a:	3b0f      	subs	r3, #15
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	8abb      	ldrh	r3, [r7, #20]
 8000e50:	3314      	adds	r3, #20
 8000e52:	b299      	uxth	r1, r3
 8000e54:	8a3b      	ldrh	r3, [r7, #16]
 8000e56:	8a7a      	ldrh	r2, [r7, #18]
 8000e58:	4c05      	ldr	r4, [pc, #20]	; (8000e70 <ReadImageTest+0xf8>)
 8000e5a:	9400      	str	r4, [sp, #0]
 8000e5c:	f001 fd40 	bl	80028e0 <BSP_LCD_DrawRGB16Image>
  return(ctStartT);
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08004b18 	.word	0x08004b18
 8000e70:	2000047c 	.word	0x2000047c
 8000e74:	08004994 	.word	0x08004994

08000e78 <mainApp>:
#ifdef osCMSIS
void StartDefaultTask(void const * argument)
#else
void mainApp(void)
#endif
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  uint32_t t;

  Delay(300);
 8000e7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e82:	f001 ffb1 	bl	8002de8 <HAL_Delay>

  BSP_LCD_Init();
 8000e86:	f001 f807 	bl	8001e98 <BSP_LCD_Init>

  t = random();
 8000e8a:	f002 fd5d 	bl	8003948 <random>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	607b      	str	r3, [r7, #4]

  Delay(100);
 8000e92:	2064      	movs	r0, #100	; 0x64
 8000e94:	f001 ffa8 	bl	8002de8 <HAL_Delay>
  printf("Display ID = %X\r\n", (unsigned int)BSP_LCD_ReadID());
 8000e98:	f001 fcf2 	bl	8002880 <BSP_LCD_ReadID>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4892      	ldr	r0, [pc, #584]	; (80010ec <mainApp+0x274>)
 8000ea2:	f002 fcc3 	bl	800382c <iprintf>
  #endif 

  while(1)
  {
    #ifdef  __GNUC__
    _impure_ptr->_r48->_rand_next = 0;
 8000ea6:	4b92      	ldr	r3, [pc, #584]	; (80010f0 <mainApp+0x278>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    #endif

    Delay(100);
 8000eb8:	2064      	movs	r0, #100	; 0x64
 8000eba:	f001 ff95 	bl	8002de8 <HAL_Delay>
    t = 300;
 8000ebe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ec2:	607b      	str	r3, [r7, #4]
    POWERMETER_START;
    Delay(t);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f001 ff8f 	bl	8002de8 <HAL_Delay>
    POWERMETER_STOP;
    POWERMETER_REF;
    printf("Delay 300\r\n");
 8000eca:	488a      	ldr	r0, [pc, #552]	; (80010f4 <mainApp+0x27c>)
 8000ecc:	f002 fd34 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed4:	f001 ff88 	bl	8002de8 <HAL_Delay>

    POWERMETER_START;
    t = ClearTest();
 8000ed8:	f7ff f938 	bl	800014c <ClearTest>
 8000edc:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Clear Test: %d ms", (int)t);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4885      	ldr	r0, [pc, #532]	; (80010f8 <mainApp+0x280>)
 8000ee4:	f002 fca2 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f001 ff7d 	bl	8002de8 <HAL_Delay>
 8000eee:	4883      	ldr	r0, [pc, #524]	; (80010fc <mainApp+0x284>)
 8000ef0:	f002 fd22 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f001 ff76 	bl	8002de8 <HAL_Delay>

    POWERMETER_START;
    t = PixelTest(100000);
 8000efc:	4880      	ldr	r0, [pc, #512]	; (8001100 <mainApp+0x288>)
 8000efe:	f7ff f937 	bl	8000170 <PixelTest>
 8000f02:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Pixel Test: %d ms", (int)t);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4619      	mov	r1, r3
 8000f08:	487e      	ldr	r0, [pc, #504]	; (8001104 <mainApp+0x28c>)
 8000f0a:	f002 fc8f 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000f0e:	200a      	movs	r0, #10
 8000f10:	f001 ff6a 	bl	8002de8 <HAL_Delay>
 8000f14:	4879      	ldr	r0, [pc, #484]	; (80010fc <mainApp+0x284>)
 8000f16:	f002 fd0f 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1e:	f001 ff63 	bl	8002de8 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f001 f828 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = LineTest(1000);
 8000f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2c:	f7ff f96a 	bl	8000204 <LineTest>
 8000f30:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Line Test: %d ms", (int)t);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4874      	ldr	r0, [pc, #464]	; (8001108 <mainApp+0x290>)
 8000f38:	f002 fc78 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f001 ff53 	bl	8002de8 <HAL_Delay>
 8000f42:	486e      	ldr	r0, [pc, #440]	; (80010fc <mainApp+0x284>)
 8000f44:	f002 fcf8 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f001 ff4c 	bl	8002de8 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f001 f811 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = FillRectTest(250);
 8000f56:	20fa      	movs	r0, #250	; 0xfa
 8000f58:	f7ff f9b8 	bl	80002cc <FillRectTest>
 8000f5c:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Fill Rect Test: %d ms", (int)t);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4619      	mov	r1, r3
 8000f62:	486a      	ldr	r0, [pc, #424]	; (800110c <mainApp+0x294>)
 8000f64:	f002 fc62 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f001 ff3d 	bl	8002de8 <HAL_Delay>
 8000f6e:	4863      	ldr	r0, [pc, #396]	; (80010fc <mainApp+0x284>)
 8000f70:	f002 fce2 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f001 ff36 	bl	8002de8 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fffb 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = CircleTest(DELAY_CHAPTER);
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f7ff fac9 	bl	800051c <CircleTest>
 8000f8a:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Circle Test: %d ms", (int)t);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	485f      	ldr	r0, [pc, #380]	; (8001110 <mainApp+0x298>)
 8000f92:	f002 fc4b 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000f96:	200a      	movs	r0, #10
 8000f98:	f001 ff26 	bl	8002de8 <HAL_Delay>
 8000f9c:	4857      	ldr	r0, [pc, #348]	; (80010fc <mainApp+0x284>)
 8000f9e:	f002 fccb 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f001 ff1f 	bl	8002de8 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 ffe4 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = FillCircleTest(250);
 8000fb0:	20fa      	movs	r0, #250	; 0xfa
 8000fb2:	f7ff fb2f 	bl	8000614 <FillCircleTest>
 8000fb6:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Fill Circle Test: %d ms", (int)t);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4855      	ldr	r0, [pc, #340]	; (8001114 <mainApp+0x29c>)
 8000fbe:	f002 fc35 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f001 ff10 	bl	8002de8 <HAL_Delay>
 8000fc8:	484c      	ldr	r0, [pc, #304]	; (80010fc <mainApp+0x284>)
 8000fca:	f002 fcb5 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd2:	f001 ff09 	bl	8002de8 <HAL_Delay>

    #if BITMAP_TEST == 1
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 ffce 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = CharTest(5000);
 8000fdc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe0:	f7ff f9e2 	bl	80003a8 <CharTest>
 8000fe4:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Char Test: %d ms", (int)t);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	484b      	ldr	r0, [pc, #300]	; (8001118 <mainApp+0x2a0>)
 8000fec:	f002 fc1e 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f001 fef9 	bl	8002de8 <HAL_Delay>
 8000ff6:	4841      	ldr	r0, [pc, #260]	; (80010fc <mainApp+0x284>)
 8000ff8:	f002 fc9e 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f001 fef2 	bl	8002de8 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 ffb7 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = BitmapTest(100);
 800100a:	2064      	movs	r0, #100	; 0x64
 800100c:	f7ff fc0a 	bl	8000824 <BitmapTest>
 8001010:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Bitmap Test: %d ms", (int)t);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4619      	mov	r1, r3
 8001016:	4841      	ldr	r0, [pc, #260]	; (800111c <mainApp+0x2a4>)
 8001018:	f002 fc08 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 800101c:	200a      	movs	r0, #10
 800101e:	f001 fee3 	bl	8002de8 <HAL_Delay>
 8001022:	4836      	ldr	r0, [pc, #216]	; (80010fc <mainApp+0x284>)
 8001024:	f002 fc88 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f001 fedc 	bl	8002de8 <HAL_Delay>

    #if READ_TEST == 1
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001030:	2000      	movs	r0, #0
 8001032:	f000 ffa1 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = ReadPixelTest(20);
 8001036:	2014      	movs	r0, #20
 8001038:	f7ff fdfe 	bl	8000c38 <ReadPixelTest>
 800103c:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("ReadPixel Test: %d ms", (int)t);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4619      	mov	r1, r3
 8001042:	4837      	ldr	r0, [pc, #220]	; (8001120 <mainApp+0x2a8>)
 8001044:	f002 fbf2 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8001048:	200a      	movs	r0, #10
 800104a:	f001 fecd 	bl	8002de8 <HAL_Delay>
 800104e:	482b      	ldr	r0, [pc, #172]	; (80010fc <mainApp+0x284>)
 8001050:	f002 fc72 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f001 fec6 	bl	8002de8 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800105c:	2000      	movs	r0, #0
 800105e:	f000 ff8b 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = ReadImageTest(20);
 8001062:	2014      	movs	r0, #20
 8001064:	f7ff fe88 	bl	8000d78 <ReadImageTest>
 8001068:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("ReadImage Test: %d ms", (int)t);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4619      	mov	r1, r3
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <mainApp+0x2ac>)
 8001070:	f002 fbdc 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 8001074:	200a      	movs	r0, #10
 8001076:	f001 feb7 	bl	8002de8 <HAL_Delay>
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <mainApp+0x284>)
 800107c:	f002 fc5c 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 8001080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001084:	f001 feb0 	bl	8002de8 <HAL_Delay>
    #endif

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 ff75 	bl	8001f78 <BSP_LCD_Clear>
    ScrollTest(0);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fc0e 	bl	80008b0 <ScrollTest>
    printf("Scroll Test\r\n");
 8001094:	4824      	ldr	r0, [pc, #144]	; (8001128 <mainApp+0x2b0>)
 8001096:	f002 fc4f 	bl	8003938 <puts>
    Delay(DELAY_CHAPTER);
 800109a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109e:	f001 fea3 	bl	8002de8 <HAL_Delay>

    #endif /* #if BITMAP_TEST == 1 */

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 ff68 	bl	8001f78 <BSP_LCD_Clear>
    POWERMETER_START;
    t = ColorTest();
 80010a8:	f7ff fb30 	bl	800070c <ColorTest>
 80010ac:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Color Test: %d ms", (int)t);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4619      	mov	r1, r3
 80010b2:	481e      	ldr	r0, [pc, #120]	; (800112c <mainApp+0x2b4>)
 80010b4:	f002 fbba 	bl	800382c <iprintf>
    POWERMETER_PRINT;
 80010b8:	200a      	movs	r0, #10
 80010ba:	f001 fe95 	bl	8002de8 <HAL_Delay>
 80010be:	480f      	ldr	r0, [pc, #60]	; (80010fc <mainApp+0x284>)
 80010c0:	f002 fc3a 	bl	8003938 <puts>
    Delay(3 * DELAY_CHAPTER);
 80010c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010c8:	f001 fe8e 	bl	8002de8 <HAL_Delay>

    BSP_LCD_DisplayOff();
 80010cc:	f001 faba 	bl	8002644 <BSP_LCD_DisplayOff>
    Delay(DELAY_CHAPTER);
 80010d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d4:	f001 fe88 	bl	8002de8 <HAL_Delay>
    BSP_LCD_DisplayOn();
 80010d8:	f001 faaa 	bl	8002630 <BSP_LCD_DisplayOn>
    Delay(DELAY_CHAPTER);
 80010dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e0:	f001 fe82 	bl	8002de8 <HAL_Delay>

    printf("\r\n");
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <mainApp+0x284>)
 80010e6:	f002 fc27 	bl	8003938 <puts>
    _impure_ptr->_r48->_rand_next = 0;
 80010ea:	e6dc      	b.n	8000ea6 <mainApp+0x2e>
 80010ec:	080049b0 	.word	0x080049b0
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	080049c4 	.word	0x080049c4
 80010f8:	080049d0 	.word	0x080049d0
 80010fc:	080049e4 	.word	0x080049e4
 8001100:	000186a0 	.word	0x000186a0
 8001104:	080049e8 	.word	0x080049e8
 8001108:	080049fc 	.word	0x080049fc
 800110c:	08004a10 	.word	0x08004a10
 8001110:	08004a28 	.word	0x08004a28
 8001114:	08004a3c 	.word	0x08004a3c
 8001118:	08004a54 	.word	0x08004a54
 800111c:	08004a68 	.word	0x08004a68
 8001120:	08004a7c 	.word	0x08004a7c
 8001124:	08004a94 	.word	0x08004a94
 8001128:	08004aac 	.word	0x08004aac
 800112c:	08004abc 	.word	0x08004abc

08001130 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <ili9488_Init+0x108>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d115      	bne.n	800116c <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <ili9488_Init+0x108>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <ili9488_Init+0x108>)
 800114c:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <ili9488_Init+0x108>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <ili9488_Init+0x2e>
      LCD_IO_Init();
 800115a:	f000 fb85 	bl	8001868 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <ili9488_Init+0x108>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b33      	ldr	r3, [pc, #204]	; (8001238 <ili9488_Init+0x108>)
 800116a:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 800116c:	2069      	movs	r0, #105	; 0x69
 800116e:	f000 fb65 	bl	800183c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fc10 	bl	8001998 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f000 fb5f 	bl	800183c <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 800117e:	220f      	movs	r2, #15
 8001180:	492e      	ldr	r1, [pc, #184]	; (800123c <ili9488_Init+0x10c>)
 8001182:	20e0      	movs	r0, #224	; 0xe0
 8001184:	f000 fcfa 	bl	8001b7c <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8001188:	220f      	movs	r2, #15
 800118a:	492d      	ldr	r1, [pc, #180]	; (8001240 <ili9488_Init+0x110>)
 800118c:	20e1      	movs	r0, #225	; 0xe1
 800118e:	f000 fcf5 	bl	8001b7c <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8001192:	2202      	movs	r2, #2
 8001194:	492b      	ldr	r1, [pc, #172]	; (8001244 <ili9488_Init+0x114>)
 8001196:	20c0      	movs	r0, #192	; 0xc0
 8001198:	f000 fcf0 	bl	8001b7c <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 800119c:	2005      	movs	r0, #5
 800119e:	f000 fb4d 	bl	800183c <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 80011a2:	20c1      	movs	r0, #193	; 0xc1
 80011a4:	f000 fbf8 	bl	8001998 <LCD_IO_WriteCmd8>
 80011a8:	2041      	movs	r0, #65	; 0x41
 80011aa:	f000 fc25 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_Delay(5);
 80011ae:	2005      	movs	r0, #5
 80011b0:	f000 fb44 	bl	800183c <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 80011b4:	2203      	movs	r2, #3
 80011b6:	4924      	ldr	r1, [pc, #144]	; (8001248 <ili9488_Init+0x118>)
 80011b8:	20c5      	movs	r0, #197	; 0xc5
 80011ba:	f000 fcdf 	bl	8001b7c <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 80011be:	2005      	movs	r0, #5
 80011c0:	f000 fb3c 	bl	800183c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
  #else
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
 80011c4:	203a      	movs	r0, #58	; 0x3a
 80011c6:	f000 fbe7 	bl	8001998 <LCD_IO_WriteCmd8>
 80011ca:	2055      	movs	r0, #85	; 0x55
 80011cc:	f000 fc14 	bl	80019f8 <LCD_IO_WriteData8>
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 80011d0:	20b1      	movs	r0, #177	; 0xb1
 80011d2:	f000 fbe1 	bl	8001998 <LCD_IO_WriteCmd8>
 80011d6:	20a0      	movs	r0, #160	; 0xa0
 80011d8:	f000 fc0e 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 80011dc:	20b4      	movs	r0, #180	; 0xb4
 80011de:	f000 fbdb 	bl	8001998 <LCD_IO_WriteCmd8>
 80011e2:	2002      	movs	r0, #2
 80011e4:	f000 fc08 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 80011e8:	2202      	movs	r2, #2
 80011ea:	4918      	ldr	r1, [pc, #96]	; (800124c <ili9488_Init+0x11c>)
 80011ec:	20b6      	movs	r0, #182	; 0xb6
 80011ee:	f000 fcc5 	bl	8001b7c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 80011f2:	20e9      	movs	r0, #233	; 0xe9
 80011f4:	f000 fbd0 	bl	8001998 <LCD_IO_WriteCmd8>
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fbfd 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 80011fe:	2204      	movs	r2, #4
 8001200:	4913      	ldr	r1, [pc, #76]	; (8001250 <ili9488_Init+0x120>)
 8001202:	20f7      	movs	r0, #247	; 0xf7
 8001204:	f000 fcba 	bl	8001b7c <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8001208:	2005      	movs	r0, #5
 800120a:	f000 fb17 	bl	800183c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 800120e:	2011      	movs	r0, #17
 8001210:	f000 fbc2 	bl	8001998 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8001214:	2078      	movs	r0, #120	; 0x78
 8001216:	f000 fb11 	bl	800183c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 800121a:	2029      	movs	r0, #41	; 0x29
 800121c:	f000 fbbc 	bl	8001998 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8001220:	2005      	movs	r0, #5
 8001222:	f000 fb0b 	bl	800183c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8001226:	2036      	movs	r0, #54	; 0x36
 8001228:	f000 fbb6 	bl	8001998 <LCD_IO_WriteCmd8>
 800122c:	2048      	movs	r0, #72	; 0x48
 800122e:	f000 fbe3 	bl	80019f8 <LCD_IO_WriteData8>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000fc 	.word	0x200000fc
 800123c:	08004ad0 	.word	0x08004ad0
 8001240:	08004ae0 	.word	0x08004ae0
 8001244:	08004af0 	.word	0x08004af0
 8001248:	08004af4 	.word	0x08004af4
 800124c:	08004af8 	.word	0x08004af8
 8001250:	08004afc 	.word	0x08004afc

08001254 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8001258:	2011      	movs	r0, #17
 800125a:	f000 fb9d 	bl	8001998 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 faf7 	bl	8001852 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 800126c:	2010      	movs	r0, #16
 800126e:	f000 fb93 	bl	8001998 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 faed 	bl	8001852 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8001280:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8001290:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <ili9488_ReadID+0x3c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 80012ae:	f7ff ff3f 	bl	8001130 <ili9488_Init>

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
  id <<= 1;
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 1);
 80012b2:	1d39      	adds	r1, r7, #4
 80012b4:	2301      	movs	r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	2004      	movs	r0, #4
 80012ba:	f000 fd0d 	bl	8001cd8 <LCD_IO_ReadCmd8MultipleData8>
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <ili9488_ReadID+0x40>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d102      	bne.n	80012cc <ili9488_ReadID+0x30>
    return 0x9488;
 80012c6:	f249 4388 	movw	r3, #38024	; 0x9488
 80012ca:	e000      	b.n	80012ce <ili9488_ReadID+0x32>
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000fc 	.word	0x200000fc
 80012dc:	00668054 	.word	0x00668054

080012e0 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 80012f0:	202a      	movs	r0, #42	; 0x2a
 80012f2:	f000 fb51 	bl	8001998 <LCD_IO_WriteCmd8>
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80012fc:	3301      	adds	r3, #1
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fb78 	bl	80019f8 <LCD_IO_WriteData8>
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fb70 	bl	80019f8 <LCD_IO_WriteData8>
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800131e:	3301      	adds	r3, #1
 8001320:	121b      	asrs	r3, r3, #8
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fb67 	bl	80019f8 <LCD_IO_WriteData8>
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fb5f 	bl	80019f8 <LCD_IO_WriteData8>
 800133a:	202b      	movs	r0, #43	; 0x2b
 800133c:	f000 fb2c 	bl	8001998 <LCD_IO_WriteCmd8>
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	b29b      	uxth	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fb55 	bl	80019f8 <LCD_IO_WriteData8>
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fb50 	bl	80019f8 <LCD_IO_WriteData8>
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fb49 	bl	80019f8 <LCD_IO_WriteData8>
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fb44 	bl	80019f8 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
 8001382:	460b      	mov	r3, r1
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800138a:	202a      	movs	r0, #42	; 0x2a
 800138c:	f000 fb04 	bl	8001998 <LCD_IO_WriteCmd8>
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001396:	3301      	adds	r3, #1
 8001398:	121b      	asrs	r3, r3, #8
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fb2b 	bl	80019f8 <LCD_IO_WriteData8>
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fb23 	bl	80019f8 <LCD_IO_WriteData8>
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80013b8:	3301      	adds	r3, #1
 80013ba:	121b      	asrs	r3, r3, #8
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fb1a 	bl	80019f8 <LCD_IO_WriteData8>
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fb12 	bl	80019f8 <LCD_IO_WriteData8>
 80013d4:	202b      	movs	r0, #43	; 0x2b
 80013d6:	f000 fadf 	bl	8001998 <LCD_IO_WriteCmd8>
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fb08 	bl	80019f8 <LCD_IO_WriteData8>
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fb03 	bl	80019f8 <LCD_IO_WriteData8>
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fafc 	bl	80019f8 <LCD_IO_WriteData8>
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f000 faf7 	bl	80019f8 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
  ili9488_write16to24(RGBCode);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
 800140a:	202c      	movs	r0, #44	; 0x2c
 800140c:	f000 fac4 	bl	8001998 <LCD_IO_WriteCmd8>
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fb18 	bl	8001a48 <LCD_IO_WriteData16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8001430:	202a      	movs	r0, #42	; 0x2a
 8001432:	f000 fab1 	bl	8001998 <LCD_IO_WriteCmd8>
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800143c:	3301      	adds	r3, #1
 800143e:	121b      	asrs	r3, r3, #8
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fad8 	bl	80019f8 <LCD_IO_WriteData8>
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fad0 	bl	80019f8 <LCD_IO_WriteData8>
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800145e:	3301      	adds	r3, #1
 8001460:	121b      	asrs	r3, r3, #8
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fac7 	bl	80019f8 <LCD_IO_WriteData8>
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fabf 	bl	80019f8 <LCD_IO_WriteData8>
 800147a:	202b      	movs	r0, #43	; 0x2b
 800147c:	f000 fa8c 	bl	8001998 <LCD_IO_WriteCmd8>
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fab5 	bl	80019f8 <LCD_IO_WriteData8>
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fab0 	bl	80019f8 <LCD_IO_WriteData8>
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	b29b      	uxth	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 faa9 	bl	80019f8 <LCD_IO_WriteData8>
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 faa4 	bl	80019f8 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
 80014b0:	f107 010e 	add.w	r1, r7, #14
 80014b4:	2301      	movs	r3, #1
 80014b6:	2201      	movs	r2, #1
 80014b8:	202e      	movs	r0, #46	; 0x2e
 80014ba:	f000 fc73 	bl	8001da4 <LCD_IO_ReadCmd8MultipleData16>
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 80014be:	89fb      	ldrh	r3, [r7, #14]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4623      	mov	r3, r4
 80014d8:	80fb      	strh	r3, [r7, #6]
 80014da:	4603      	mov	r3, r0
 80014dc:	80bb      	strh	r3, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]
 80014e2:	4613      	mov	r3, r2
 80014e4:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
  #elif ILI9488_INTERFACE == 1
  #if (LCD_ORIENTATION == 0)
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Width - Xpos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Xpos);
 80014e6:	202a      	movs	r0, #42	; 0x2a
 80014e8:	f000 fa56 	bl	8001998 <LCD_IO_WriteCmd8>
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	121b      	asrs	r3, r3, #8
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fa7c 	bl	80019f8 <LCD_IO_WriteData8>
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4413      	add	r3, r2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fa70 	bl	80019f8 <LCD_IO_WriteData8>
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800151e:	3301      	adds	r3, #1
 8001520:	121b      	asrs	r3, r3, #8
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fa67 	bl	80019f8 <LCD_IO_WriteData8>
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fa5f 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800153a:	202b      	movs	r0, #43	; 0x2b
 800153c:	f000 fa2c 	bl	8001998 <LCD_IO_WriteCmd8>
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fa55 	bl	80019f8 <LCD_IO_WriteData8>
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fa50 	bl	80019f8 <LCD_IO_WriteData8>
 8001558:	88ba      	ldrh	r2, [r7, #4]
 800155a:	883b      	ldrh	r3, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	3b01      	subs	r3, #1
 8001560:	121b      	asrs	r3, r3, #8
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa47 	bl	80019f8 <LCD_IO_WriteData8>
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	883b      	ldrh	r3, [r7, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fa3c 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}

08001588 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b085      	sub	sp, #20
 800158c:	af02      	add	r7, sp, #8
 800158e:	4604      	mov	r4, r0
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	4603      	mov	r3, r0
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	807b      	strh	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 80015a6:	883a      	ldrh	r2, [r7, #0]
 80015a8:	8879      	ldrh	r1, [r7, #2]
 80015aa:	88b8      	ldrh	r0, [r7, #4]
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	f000 f820 	bl	80015f6 <ili9488_FillRect>
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}

080015be <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80015be:	b590      	push	{r4, r7, lr}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af02      	add	r7, sp, #8
 80015c4:	4604      	mov	r4, r0
 80015c6:	4608      	mov	r0, r1
 80015c8:	4611      	mov	r1, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	4623      	mov	r3, r4
 80015ce:	80fb      	strh	r3, [r7, #6]
 80015d0:	4603      	mov	r3, r0
 80015d2:	80bb      	strh	r3, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 80015dc:	883a      	ldrh	r2, [r7, #0]
 80015de:	8879      	ldrh	r1, [r7, #2]
 80015e0:	88b8      	ldrh	r0, [r7, #4]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	4613      	mov	r3, r2
 80015e8:	2201      	movs	r2, #1
 80015ea:	f000 f804 	bl	80015f6 <ili9488_FillRect>
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}

080015f6 <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80015f6:	b590      	push	{r4, r7, lr}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4604      	mov	r4, r0
 80015fe:	4608      	mov	r0, r1
 8001600:	4611      	mov	r1, r2
 8001602:	461a      	mov	r2, r3
 8001604:	4623      	mov	r3, r4
 8001606:	80fb      	strh	r3, [r7, #6]
 8001608:	4603      	mov	r3, r0
 800160a:	80bb      	strh	r3, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8001614:	883b      	ldrh	r3, [r7, #0]
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	88b9      	ldrh	r1, [r7, #4]
 800161a:	88f8      	ldrh	r0, [r7, #6]
 800161c:	f7ff ff54 	bl	80014c8 <ili9488_SetDisplayWindow>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
  uint32_t XYsize = Xsize * Ysize;
  while(XYsize--)
    ili9488_write16to24(RGBCode);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	883a      	ldrh	r2, [r7, #0]
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	461a      	mov	r2, r3
 800162a:	8b3b      	ldrh	r3, [r7, #24]
 800162c:	4619      	mov	r1, r3
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	f000 fa46 	bl	8001ac0 <LCD_IO_WriteCmd8DataFill16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}

0800163c <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	603a      	str	r2, [r7, #0]
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	460b      	mov	r3, r1
 800164a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3316      	adds	r3, #22
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b29a      	uxth	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3317      	adds	r3, #23
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b29b      	uxth	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	88bb      	ldrh	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3302      	adds	r3, #2
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
 8001690:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	330a      	adds	r3, #10
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	330c      	adds	r3, #12
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	603b      	str	r3, [r7, #0]
    ili9488_write16to24(*(uint16_t *)pbmp);
    pbmp+= 2;
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 80016c0:	2036      	movs	r0, #54	; 0x36
 80016c2:	f000 f969 	bl	8001998 <LCD_IO_WriteCmd8>
 80016c6:	20c8      	movs	r0, #200	; 0xc8
 80016c8:	f000 f996 	bl	80019f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	202c      	movs	r0, #44	; 0x2c
 80016d2:	f000 fa9f 	bl	8001c14 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 80016d6:	2036      	movs	r0, #54	; 0x36
 80016d8:	f000 f95e 	bl	8001998 <LCD_IO_WriteCmd8>
 80016dc:	2048      	movs	r0, #72	; 0x48
 80016de:	f000 f98b 	bl	80019f8 <LCD_IO_WriteData8>
  #endif

  ILI9488_LCDMUTEX_POP();
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4604      	mov	r4, r0
 80016f2:	4608      	mov	r0, r1
 80016f4:	4611      	mov	r1, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	80fb      	strh	r3, [r7, #6]
 80016fc:	4603      	mov	r3, r0
 80016fe:	80bb      	strh	r3, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	883a      	ldrh	r2, [r7, #0]
 800170c:	fb02 f303 	mul.w	r3, r2, r3
 8001710:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8001712:	883b      	ldrh	r3, [r7, #0]
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	88b9      	ldrh	r1, [r7, #4]
 8001718:	88f8      	ldrh	r0, [r7, #6]
 800171a:	f7ff fed5 	bl	80014c8 <ili9488_SetDisplayWindow>
  {
    ili9488_write16to24(*pdata);
    pdata++;
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6a39      	ldr	r1, [r7, #32]
 8001722:	202c      	movs	r0, #44	; 0x2c
 8001724:	f000 fa76 	bl	8001c14 <LCD_IO_WriteCmd8MultipleData16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}

08001730 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	4604      	mov	r4, r0
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	80fb      	strh	r3, [r7, #6]
 8001742:	4603      	mov	r3, r0
 8001744:	80bb      	strh	r3, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	807b      	strh	r3, [r7, #2]
 800174a:	4613      	mov	r3, r2
 800174c:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	883a      	ldrh	r2, [r7, #0]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800175c:	883b      	ldrh	r3, [r7, #0]
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	88b9      	ldrh	r1, [r7, #4]
 8001762:	88f8      	ldrh	r0, [r7, #6]
 8001764:	f7ff feb0 	bl	80014c8 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
 8001768:	2301      	movs	r3, #1
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	6a39      	ldr	r1, [r7, #32]
 800176e:	202e      	movs	r0, #46	; 0x2e
 8001770:	f000 fb18 	bl	8001da4 <LCD_IO_ReadCmd8MultipleData16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
 8001786:	460b      	mov	r3, r1
 8001788:	80bb      	strh	r3, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	807b      	strh	r3, [r7, #2]
  static uint16_t scrparam[4] = {0, 0, 0, 0};
  ILI9488_LCDMUTEX_PUSH();
  #if (ILI9488_ORIENTATION == 0)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <ili9488_Scroll+0xb8>)
 8001790:	885b      	ldrh	r3, [r3, #2]
 8001792:	88ba      	ldrh	r2, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d104      	bne.n	80017a2 <ili9488_Scroll+0x26>
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <ili9488_Scroll+0xb8>)
 800179a:	88db      	ldrh	r3, [r3, #6]
 800179c:	887a      	ldrh	r2, [r7, #2]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d013      	beq.n	80017ca <ili9488_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <ili9488_Scroll+0xb8>)
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <ili9488_Scroll+0xb8>)
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 80017ae:	88ba      	ldrh	r2, [r7, #4]
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	4413      	add	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <ili9488_Scroll+0xb8>)
 80017be:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 80017c0:	2203      	movs	r2, #3
 80017c2:	491d      	ldr	r1, [pc, #116]	; (8001838 <ili9488_Scroll+0xbc>)
 80017c4:	2033      	movs	r0, #51	; 0x33
 80017c6:	f000 fa25 	bl	8001c14 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	425b      	negs	r3, r3
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <ili9488_Scroll+0xb8>)
 80017d2:	8892      	ldrh	r2, [r2, #4]
 80017d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80017d8:	fb02 f201 	mul.w	r2, r2, r1
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da0a      	bge.n	80017fe <ili9488_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <ili9488_Scroll+0xb8>)
 80017ea:	889a      	ldrh	r2, [r3, #4]
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4413      	add	r3, r2
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <ili9488_Scroll+0xb8>)
 80017f4:	885b      	ldrh	r3, [r3, #2]
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	e005      	b.n	800180a <ili9488_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <ili9488_Scroll+0xb8>)
 8001800:	885a      	ldrh	r2, [r3, #2]
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <ili9488_Scroll+0xb8>)
 8001810:	8812      	ldrh	r2, [r2, #0]
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <ili9488_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <ili9488_Scroll+0xb8>)
 800181a:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <ili9488_Scroll+0xb8>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	4619      	mov	r1, r3
 8001824:	2037      	movs	r0, #55	; 0x37
 8001826:	f000 f94b 	bl	8001ac0 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000100 	.word	0x20000100
 8001838:	20000102 	.word	0x20000102

0800183c <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 facf 	bl	8002de8 <HAL_Delay>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif
	
  RCC->APB2ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <LCD_IO_Init+0x108>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <LCD_IO_Init+0x108>)
 8001872:	f043 030c 	orr.w	r3, r3, #12
 8001876:	6193      	str	r3, [r2, #24]
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);
	
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          // RST = 1
 8001878:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <LCD_IO_Init+0x10c>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <LCD_IO_Init+0x110>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 030f 	bic.w	r3, r3, #15
 8001886:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <LCD_IO_Init+0x110>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A    /* backlight */
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
  LCD_IO_Bl_OnOff(1);
  #endif

  GPIOX_ODR(LCD_CS) = 1;                /* CS = 1 */
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <LCD_IO_Init+0x114>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  LCD_RS_DATA;                          /* RS = 1 */
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <LCD_IO_Init+0x118>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_WR) = 1;                /* WR = 1 */
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <LCD_IO_Init+0x11c>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_RD) = 1;                /* RD = 1 */
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <LCD_IO_Init+0x120>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
  #endif

  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <LCD_IO_Init+0x110>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <LCD_IO_Init+0x110>)
 80018b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80018b4:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RD);
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <LCD_IO_Init+0x110>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018be:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <LCD_IO_Init+0x110>)
 80018c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80018c4:	6013      	str	r3, [r2, #0]
  #endif
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_WR);
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <LCD_IO_Init+0x124>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ce:	4a2f      	ldr	r2, [pc, #188]	; (800198c <LCD_IO_Init+0x124>)
 80018d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80018d4:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <LCD_IO_Init+0x124>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 030f 	bic.w	r3, r3, #15
 80018de:	4a2b      	ldr	r2, [pc, #172]	; (800198c <LCD_IO_Init+0x124>)
 80018e0:	f043 0303 	orr.w	r3, r3, #3
 80018e4:	6013      	str	r3, [r2, #0]

  LCD_DIRWRITE;                         /* data pins set the output direction */
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <LCD_IO_Init+0x110>)
 80018e8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80018ec:	605a      	str	r2, [r3, #4]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff ffa4 	bl	800183c <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <LCD_IO_Init+0x10c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ff9e 	bl	800183c <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <LCD_IO_Init+0x10c>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff ff98 	bl	800183c <LCD_Delay>

  #if TS_ADC > 0
  RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;    /* ADC clock = cpuclock / 6 */
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <LCD_IO_Init+0x108>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <LCD_IO_Init+0x108>)
 8001912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001916:	6053      	str	r3, [r2, #4]
  RCC->APB2ENR |= RCC_APB2ENR_ADCXEN;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <LCD_IO_Init+0x108>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <LCD_IO_Init+0x108>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	6193      	str	r3, [r2, #24]
  LCD_Delay(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ff89 	bl	800183c <LCD_Delay>
  ADCX->CR1 = ADC_CR1_DISCEN;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <LCD_IO_Init+0x128>)
 800192c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001930:	605a      	str	r2, [r3, #4]
  ADCX->CR2 = (7 << ADC_CR2_EXTSEL_Pos) | ADC_CR2_EXTTRIG | ADC_CR2_ADON;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <LCD_IO_Init+0x128>)
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <LCD_IO_Init+0x12c>)
 8001936:	609a      	str	r2, [r3, #8]
  #if TS_XM_ADCCH >= 10
  ADCX->SMPR1 |= TS_SAMPLETIME << (3 * (TS_XM_ADCCH - 10));
  #else
  ADCX->SMPR2 |= TS_SAMPLETIME << (3 * (TS_XM_ADCCH));
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <LCD_IO_Init+0x128>)
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <LCD_IO_Init+0x128>)
 800193e:	f043 0303 	orr.w	r3, r3, #3
 8001942:	6113      	str	r3, [r2, #16]
  #endif
  #if TS_YP_ADCCH >= 10
  ADCX->SMPR1 |= TS_SAMPLETIME << (3 * (TS_YP_ADCCH - 10));
  #else
  ADCX->SMPR2 |= TS_SAMPLETIME << (3 * (TS_YP_ADCCH));
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <LCD_IO_Init+0x128>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <LCD_IO_Init+0x128>)
 800194a:	f043 0318 	orr.w	r3, r3, #24
 800194e:	6113      	str	r3, [r2, #16]
  #endif
  ADCX->CR2 |= ADC_CR2_CAL;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <LCD_IO_Init+0x128>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <LCD_IO_Init+0x128>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6093      	str	r3, [r2, #8]
  while(ADCX->CR2 & ADC_CR2_CAL);
 800195c:	bf00      	nop
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <LCD_IO_Init+0x128>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f9      	bne.n	800195e <LCD_IO_Init+0xf6>
  #endif /* #if TS_ADC > 0 */
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	42218180 	.word	0x42218180
 8001978:	40010c00 	.word	0x40010c00
 800197c:	42218194 	.word	0x42218194
 8001980:	42210180 	.word	0x42210180
 8001984:	42210184 	.word	0x42210184
 8001988:	42218184 	.word	0x42218184
 800198c:	40010800 	.word	0x40010800
 8001990:	40012400 	.word	0x40012400
 8001994:	001e0001 	.word	0x001e0001

08001998 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <LCD_IO_WriteCmd8+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <LCD_IO_WriteCmd8+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <LCD_IO_WriteCmd8+0x54>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	7013      	strb	r3, [r2, #0]
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <LCD_IO_WriteCmd8+0x54>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LCD_IO_WriteCmd8+0x58>)
 80019c0:	611a      	str	r2, [r3, #16]
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LCD_IO_WriteCmd8+0x5c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <LCD_IO_WriteCmd8+0x5c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <LCD_IO_WriteCmd8+0x50>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <LCD_IO_WriteCmd8+0x4c>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	42218194 	.word	0x42218194
 80019e8:	42210180 	.word	0x42210180
 80019ec:	2000335c 	.word	0x2000335c
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	42210184 	.word	0x42210184

080019f8 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <LCD_IO_WriteData8+0x40>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
  LCD_DATA8_WRITE(Data);
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <LCD_IO_WriteData8+0x44>)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	7013      	strb	r3, [r2, #0]
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <LCD_IO_WriteData8+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <LCD_IO_WriteData8+0x48>)
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <LCD_IO_WriteData8+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <LCD_IO_WriteData8+0x4c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <LCD_IO_WriteData8+0x40>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	42218194 	.word	0x42218194
 8001a3c:	2000335c 	.word	0x2000335c
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	42210184 	.word	0x42210184

08001a48 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <LCD_IO_WriteData16+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
  LCD_DATA16_WRITE(Data);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <LCD_IO_WriteData16+0x6c>)
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <LCD_IO_WriteData16+0x6c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <LCD_IO_WriteData16+0x70>)
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <LCD_IO_WriteData16+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <LCD_IO_WriteData16+0x74>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <LCD_IO_WriteData16+0x6c>)
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <LCD_IO_WriteData16+0x6c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LCD_IO_WriteData16+0x70>)
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <LCD_IO_WriteData16+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <LCD_IO_WriteData16+0x74>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <LCD_IO_WriteData16+0x68>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	42218194 	.word	0x42218194
 8001ab4:	2000335c 	.word	0x2000335c
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	42210184 	.word	0x42210184

08001ac0 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	603a      	str	r2, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	460b      	mov	r3, r1
 8001ace:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <LCD_IO_WriteCmd8DataFill16+0xa8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <LCD_IO_WriteCmd8DataFill16+0xac>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	7013      	strb	r3, [r2, #0]
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <LCD_IO_WriteCmd8DataFill16+0xac>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001b02:	e023      	b.n	8001b4c <LCD_IO_WriteCmd8DataFill16+0x8c>
  {
    LCD_DATA16_WRITE(Data);
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 8001b3e:	611a      	str	r2, [r3, #16]
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	603a      	str	r2, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1d6      	bne.n	8001b04 <LCD_IO_WriteCmd8DataFill16+0x44>
  }
  LCD_CS_OFF;
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <LCD_IO_WriteCmd8DataFill16+0xa8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	42218194 	.word	0x42218194
 8001b6c:	42210180 	.word	0x42210180
 8001b70:	2000335c 	.word	0x2000335c
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	42210184 	.word	0x42210184

08001b7c <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x84>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <LCD_IO_WriteCmd8MultipleData8+0x88>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	7013      	strb	r3, [r2, #0]
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <LCD_IO_WriteCmd8MultipleData8+0x90>)
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <LCD_IO_WriteCmd8MultipleData8+0x88>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  while(Size--)
 8001bbc:	e013      	b.n	8001be6 <LCD_IO_WriteCmd8MultipleData8+0x6a>
  {
    LCD_DATA8_WRITE(*pData);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <LCD_IO_WriteCmd8MultipleData8+0x90>)
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
    pData ++;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e6      	bne.n	8001bbe <LCD_IO_WriteCmd8MultipleData8+0x42>
  }
  LCD_CS_OFF;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x84>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	42218194 	.word	0x42218194
 8001c04:	42210180 	.word	0x42210180
 8001c08:	2000335c 	.word	0x2000335c
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	42210184 	.word	0x42210184

08001c14 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <LCD_IO_WriteCmd8MultipleData16+0xb0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <LCD_IO_WriteCmd8MultipleData16+0xb4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	7013      	strb	r3, [r2, #0]
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <LCD_IO_WriteCmd8MultipleData16+0xb4>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001c54:	e028      	b.n	8001ca8 <LCD_IO_WriteCmd8MultipleData16+0x94>
  {
    LCD_DATA16_WRITE(*pData);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    pData ++;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1d1      	bne.n	8001c56 <LCD_IO_WriteCmd8MultipleData16+0x42>
  }
  LCD_CS_OFF;
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <LCD_IO_WriteCmd8MultipleData16+0xb0>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	42218194 	.word	0x42218194
 8001cc8:	42210180 	.word	0x42210180
 8001ccc:	2000335c 	.word	0x2000335c
 8001cd0:	40010c00 	.word	0x40010c00
 8001cd4:	42210184 	.word	0x42210184

08001cd8 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <LCD_IO_ReadCmd8MultipleData8+0xb4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <LCD_IO_ReadCmd8MultipleData8+0xb8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <LCD_IO_ReadCmd8MultipleData8+0xbc>)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	7013      	strb	r3, [r2, #0]
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <LCD_IO_ReadCmd8MultipleData8+0xbc>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <LCD_IO_ReadCmd8MultipleData8+0xb8>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8001d1c:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8001d20:	605a      	str	r2, [r3, #4]
  while(DummySize--)
 8001d22:	e008      	b.n	8001d36 <LCD_IO_ReadCmd8MultipleData8+0x5e>
    LCD_DUMMY_READ;
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	603a      	str	r2, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f1      	bne.n	8001d24 <LCD_IO_ReadCmd8MultipleData8+0x4c>
  while(Size--)
 8001d40:	e012      	b.n	8001d68 <LCD_IO_ReadCmd8MultipleData8+0x90>
  {
    LCD_DATA8_READ(d);
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	75fb      	strb	r3, [r7, #23]
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    *pData = d;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	7dfa      	ldrb	r2, [r7, #23]
 8001d60:	701a      	strb	r2, [r3, #0]
    pData++;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e7      	bne.n	8001d42 <LCD_IO_ReadCmd8MultipleData8+0x6a>
  }
  LCD_CS_OFF;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <LCD_IO_ReadCmd8MultipleData8+0xb4>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8001d7a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001d7e:	605a      	str	r2, [r3, #4]
}
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	42218194 	.word	0x42218194
 8001d90:	42210180 	.word	0x42210180
 8001d94:	2000335c 	.word	0x2000335c
 8001d98:	40010c00 	.word	0x40010c00
 8001d9c:	42210184 	.word	0x42210184
 8001da0:	42218184 	.word	0x42218184

08001da4 <LCD_IO_ReadCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint8_t  dl, dh;
  LCD_CS_ON;
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <LCD_IO_ReadCmd8MultipleData16+0xdc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <LCD_IO_ReadCmd8MultipleData16+0xe0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <LCD_IO_ReadCmd8MultipleData16+0xe4>)
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	7013      	strb	r3, [r2, #0]
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <LCD_IO_ReadCmd8MultipleData16+0xe4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <LCD_IO_ReadCmd8MultipleData16+0xec>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <LCD_IO_ReadCmd8MultipleData16+0xec>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <LCD_IO_ReadCmd8MultipleData16+0xe0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8001de8:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8001dec:	605a      	str	r2, [r3, #4]
  while(DummySize--)
 8001dee:	e008      	b.n	8001e02 <LCD_IO_ReadCmd8MultipleData16+0x5e>
    LCD_DUMMY_READ;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	603a      	str	r2, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f1      	bne.n	8001df0 <LCD_IO_ReadCmd8MultipleData16+0x4c>

  while(Size--)
 8001e0c:	e026      	b.n	8001e5c <LCD_IO_ReadCmd8MultipleData16+0xb8>
  {
    LCD_DATA16_READ(dh, dl);
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	75fb      	strb	r3, [r7, #23]
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	75bb      	strb	r3, [r7, #22]
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    *pData = (dh << 8) | dl;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	7dbb      	ldrb	r3, [r7, #22]
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	801a      	strh	r2, [r3, #0]
    pData++;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3302      	adds	r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1d3      	bne.n	8001e0e <LCD_IO_ReadCmd8MultipleData16+0x6a>
  }
  LCD_CS_OFF;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <LCD_IO_ReadCmd8MultipleData16+0xdc>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8001e6e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001e72:	605a      	str	r2, [r3, #4]
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	42218194 	.word	0x42218194
 8001e84:	42210180 	.word	0x42210180
 8001e88:	2000335c 	.word	0x2000335c
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	42210184 	.word	0x42210184
 8001e94:	42218184 	.word	0x42218184

08001e98 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <BSP_LCD_Init+0x34>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <BSP_LCD_Init+0x38>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <BSP_LCD_Init+0x38>)
 8001eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb6:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <BSP_LCD_Init+0x38>)
 8001eba:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <BSP_LCD_Init+0x3c>)
 8001ebc:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000006c 	.word	0x2000006c
 8001ed0:	20003360 	.word	0x20003360
 8001ed4:	20000020 	.word	0x20000020

08001ed8 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <BSP_LCD_GetXSize+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000006c 	.word	0x2000006c

08001ef0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <BSP_LCD_GetYSize+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	4798      	blx	r3
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000006c 	.word	0x2000006c

08001f08 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <BSP_LCD_SetTextColor+0x1c>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20003360 	.word	0x20003360

08001f28 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <BSP_LCD_SetBackColor+0x1c>)
 8001f36:	6053      	str	r3, [r2, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20003360 	.word	0x20003360

08001f48 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <BSP_LCD_SetFont+0x18>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6093      	str	r3, [r2, #8]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	20003360 	.word	0x20003360

08001f64 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <BSP_LCD_GetFont+0x10>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	20003360 	.word	0x20003360

08001f78 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <BSP_LCD_Clear+0x38>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001f88:	f7ff ffa6 	bl	8001ed8 <BSP_LCD_GetXSize>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461d      	mov	r5, r3
 8001f90:	f7ff ffae 	bl	8001ef0 <BSP_LCD_GetYSize>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	462a      	mov	r2, r5
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	47a0      	blx	r4
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bdb0      	pop	{r4, r5, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000006c 	.word	0x2000006c

08001fb4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	80bb      	strh	r3, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <BSP_LCD_DisplayChar+0x50>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <BSP_LCD_DisplayChar+0x50>)
 8001fd2:	6889      	ldr	r1, [r1, #8]
 8001fd4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001fd6:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <BSP_LCD_DisplayChar+0x50>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	3307      	adds	r3, #7
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da00      	bge.n	8001fe8 <BSP_LCD_DisplayChar+0x34>
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	10db      	asrs	r3, r3, #3
 8001fea:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001fee:	441a      	add	r2, r3
 8001ff0:	88b9      	ldrh	r1, [r7, #4]
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fb2f 	bl	8002658 <DrawChar>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20003360 	.word	0x20003360

08002008 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
 8002012:	460b      	mov	r3, r1
 8002014:	80bb      	strh	r3, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <BSP_LCD_DrawPixel+0x34>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <BSP_LCD_DrawPixel+0x34>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	88b9      	ldrh	r1, [r7, #4]
 800202e:	88f8      	ldrh	r0, [r7, #6]
 8002030:	4798      	blx	r3
  }
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000006c 	.word	0x2000006c

08002040 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
 800204a:	460b      	mov	r3, r1
 800204c:	80bb      	strh	r3, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <BSP_LCD_DrawHLine+0x6c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <BSP_LCD_DrawHLine+0x6c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a1c      	ldr	r4, [r3, #32]
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <BSP_LCD_DrawHLine+0x70>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b298      	uxth	r0, r3
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	88ba      	ldrh	r2, [r7, #4]
 8002070:	88f9      	ldrh	r1, [r7, #6]
 8002072:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002074:	e015      	b.n	80020a2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e00e      	b.n	800209a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	b29a      	uxth	r2, r3
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <BSP_LCD_DrawHLine+0x70>)
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	b292      	uxth	r2, r2
 800208c:	88b9      	ldrh	r1, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ffba 	bl	8002008 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3ec      	bcc.n	800207c <BSP_LCD_DrawHLine+0x3c>
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000006c 	.word	0x2000006c
 80020b0:	20003360 	.word	0x20003360

080020b4 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
 80020be:	460b      	mov	r3, r1
 80020c0:	80bb      	strh	r3, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <BSP_LCD_DrawVLine+0x6c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <BSP_LCD_DrawVLine+0x6c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <BSP_LCD_DrawVLine+0x70>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b298      	uxth	r0, r3
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	88ba      	ldrh	r2, [r7, #4]
 80020e4:	88f9      	ldrh	r1, [r7, #6]
 80020e6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80020e8:	e015      	b.n	8002116 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e00e      	b.n	800210e <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	88bb      	ldrh	r3, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	b299      	uxth	r1, r3
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <BSP_LCD_DrawVLine+0x70>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff80 	bl	8002008 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3ec      	bcc.n	80020f0 <BSP_LCD_DrawVLine+0x3c>
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	2000006c 	.word	0x2000006c
 8002124:	20003360 	.word	0x20003360

08002128 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	4604      	mov	r4, r0
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4623      	mov	r3, r4
 8002138:	80fb      	strh	r3, [r7, #6]
 800213a:	4603      	mov	r3, r0
 800213c:	80bb      	strh	r3, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]
 8002142:	4613      	mov	r3, r2
 8002144:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002146:	2300      	movs	r3, #0
 8002148:	823b      	strh	r3, [r7, #16]
 800214a:	2300      	movs	r3, #0
 800214c:	81fb      	strh	r3, [r7, #14]
 800214e:	2300      	movs	r3, #0
 8002150:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002152:	2300      	movs	r3, #0
 8002154:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002156:	2300      	movs	r3, #0
 8002158:	847b      	strh	r3, [r7, #34]	; 0x22
 800215a:	2300      	movs	r3, #0
 800215c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800215e:	2300      	movs	r3, #0
 8002160:	83fb      	strh	r3, [r7, #30]
 8002162:	2300      	movs	r3, #0
 8002164:	83bb      	strh	r3, [r7, #28]
 8002166:	2300      	movs	r3, #0
 8002168:	837b      	strh	r3, [r7, #26]
 800216a:	2300      	movs	r3, #0
 800216c:	833b      	strh	r3, [r7, #24]
 800216e:	2300      	movs	r3, #0
 8002170:	82fb      	strh	r3, [r7, #22]
 8002172:	2300      	movs	r3, #0
 8002174:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	bfb8      	it	lt
 8002184:	425b      	neglt	r3, r3
 8002186:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002188:	883a      	ldrh	r2, [r7, #0]
 800218a:	88bb      	ldrh	r3, [r7, #4]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfb8      	it	lt
 8002192:	425b      	neglt	r3, r3
 8002194:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d304      	bcc.n	80021b0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	843b      	strh	r3, [r7, #32]
 80021ae:	e005      	b.n	80021bc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80021b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80021b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ba:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80021bc:	883a      	ldrh	r2, [r7, #0]
 80021be:	88bb      	ldrh	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d304      	bcc.n	80021ce <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	83bb      	strh	r3, [r7, #28]
 80021cc:	e005      	b.n	80021da <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80021ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80021d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80021da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	db10      	blt.n	8002208 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80021e6:	2300      	movs	r3, #0
 80021e8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80021ea:	2300      	movs	r3, #0
 80021ec:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80021ee:	8a3b      	ldrh	r3, [r7, #16]
 80021f0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80021f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021f6:	0fda      	lsrs	r2, r3, #31
 80021f8:	4413      	add	r3, r2
 80021fa:	105b      	asrs	r3, r3, #1
 80021fc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002202:	8a3b      	ldrh	r3, [r7, #16]
 8002204:	82bb      	strh	r3, [r7, #20]
 8002206:	e00f      	b.n	8002228 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002208:	2300      	movs	r3, #0
 800220a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800220c:	2300      	movs	r3, #0
 800220e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002218:	0fda      	lsrs	r2, r3, #31
 800221a:	4413      	add	r3, r2
 800221c:	105b      	asrs	r3, r3, #1
 800221e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002220:	8a3b      	ldrh	r3, [r7, #16]
 8002222:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002228:	2300      	movs	r3, #0
 800222a:	827b      	strh	r3, [r7, #18]
 800222c:	e031      	b.n	8002292 <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 800222e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002230:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <BSP_LCD_DrawLine+0x180>)
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	b292      	uxth	r2, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fee5 	bl	8002008 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800223e:	8b3a      	ldrh	r2, [r7, #24]
 8002240:	8afb      	ldrh	r3, [r7, #22]
 8002242:	4413      	add	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002248:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800224c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002250:	429a      	cmp	r2, r3
 8002252:	db0e      	blt.n	8002272 <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002254:	8b3a      	ldrh	r2, [r7, #24]
 8002256:	8b7b      	ldrh	r3, [r7, #26]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	b29b      	uxth	r3, r3
 800225c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800225e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002262:	4413      	add	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002268:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800226a:	8bfb      	ldrh	r3, [r7, #30]
 800226c:	4413      	add	r3, r2
 800226e:	b29b      	uxth	r3, r3
 8002270:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002272:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002274:	8c3b      	ldrh	r3, [r7, #32]
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800227c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800227e:	8bbb      	ldrh	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002286:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800228a:	b29b      	uxth	r3, r3
 800228c:	3301      	adds	r3, #1
 800228e:	b29b      	uxth	r3, r3
 8002290:	827b      	strh	r3, [r7, #18]
 8002292:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002296:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	ddc7      	ble.n	800222e <BSP_LCD_DrawLine+0x106>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	372c      	adds	r7, #44	; 0x2c
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}
 80022a8:	20003360 	.word	0x20003360

080022ac <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
 80022b6:	460b      	mov	r3, r1
 80022b8:	80bb      	strh	r3, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	f1c3 0303 	rsb	r3, r3, #3
 80022c6:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 80022d0:	e097      	b.n	8002402 <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4413      	add	r3, r2
 80022da:	b298      	uxth	r0, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	88ba      	ldrh	r2, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4a4c      	ldr	r2, [pc, #304]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	b292      	uxth	r2, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7ff fe8b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	b298      	uxth	r0, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	88ba      	ldrh	r2, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b29b      	uxth	r3, r3
 8002306:	4a44      	ldr	r2, [pc, #272]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	b292      	uxth	r2, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7ff fe7b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	b29a      	uxth	r2, r3
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	4413      	add	r3, r2
 800231a:	b298      	uxth	r0, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	b29b      	uxth	r3, r3
 8002320:	88ba      	ldrh	r2, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b29b      	uxth	r3, r3
 8002326:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	b292      	uxth	r2, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7ff fe6b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	b29b      	uxth	r3, r3
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b298      	uxth	r0, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	b29b      	uxth	r3, r3
 8002340:	88ba      	ldrh	r2, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	b29b      	uxth	r3, r3
 8002346:	4a34      	ldr	r2, [pc, #208]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	b292      	uxth	r2, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f7ff fe5b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	b29a      	uxth	r2, r3
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4413      	add	r3, r2
 800235a:	b298      	uxth	r0, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	b29a      	uxth	r2, r3
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	b292      	uxth	r2, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7ff fe4b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	b29b      	uxth	r3, r3
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b298      	uxth	r0, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	b29a      	uxth	r2, r3
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	b29b      	uxth	r3, r3
 8002386:	4a24      	ldr	r2, [pc, #144]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	b292      	uxth	r2, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7ff fe3b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	b29a      	uxth	r2, r3
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	4413      	add	r3, r2
 800239a:	b298      	uxth	r0, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	b292      	uxth	r2, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7ff fe2b 	bl	8002008 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	b298      	uxth	r0, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	88bb      	ldrh	r3, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4a14      	ldr	r2, [pc, #80]	; (8002418 <BSP_LCD_DrawCircle+0x16c>)
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	b292      	uxth	r2, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7ff fe1b 	bl	8002008 <BSP_LCD_DrawPixel>

    if (D < 0)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da06      	bge.n	80023e6 <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	009a      	lsls	r2, r3, #2
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4413      	add	r3, r2
 80023e0:	3306      	adds	r3, #6
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	009a      	lsls	r2, r3, #2
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	4413      	add	r3, r2
 80023f2:	330a      	adds	r3, #10
 80023f4:	617b      	str	r3, [r7, #20]
      CurY--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	3301      	adds	r3, #1
 8002400:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	429a      	cmp	r2, r3
 8002408:	f67f af63 	bls.w	80022d2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20003360 	.word	0x20003360

0800241c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	460b      	mov	r3, r1
 800242a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3312      	adds	r3, #18
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	3313      	adds	r3, #19
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	441a      	add	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	441a      	add	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	3315      	adds	r3, #21
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	4413      	add	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3316      	adds	r3, #22
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	3317      	adds	r3, #23
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	441a      	add	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3318      	adds	r3, #24
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	441a      	add	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3319      	adds	r3, #25
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	4413      	add	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	b29b      	uxth	r3, r3
 800248c:	88b9      	ldrh	r1, [r7, #4]
 800248e:	88f8      	ldrh	r0, [r7, #6]
 8002490:	f000 f9d4 	bl	800283c <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <BSP_LCD_DrawBitmap+0xb0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <BSP_LCD_DrawBitmap+0xb0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	88b9      	ldrh	r1, [r7, #4]
 80024a6:	88f8      	ldrh	r0, [r7, #6]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80024ac:	f7ff fd14 	bl	8001ed8 <BSP_LCD_GetXSize>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	f7ff fd1c 	bl	8001ef0 <BSP_LCD_GetYSize>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4622      	mov	r2, r4
 80024bc:	2100      	movs	r1, #0
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f9bc 	bl	800283c <SetDisplayWindow>
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	2000006c 	.word	0x2000006c

080024d0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4604      	mov	r4, r0
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	80fb      	strh	r3, [r7, #6]
 80024e2:	4603      	mov	r3, r0
 80024e4:	80bb      	strh	r3, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
 80024ea:	4613      	mov	r3, r2
 80024ec:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <BSP_LCD_FillRect+0x40>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <BSP_LCD_FillRect+0x44>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	883d      	ldrh	r5, [r7, #0]
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	88b9      	ldrh	r1, [r7, #4]
 8002500:	88f8      	ldrh	r0, [r7, #6]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	462b      	mov	r3, r5
 8002506:	47a0      	blx	r4
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bdb0      	pop	{r4, r5, r7, pc}
 8002510:	2000006c 	.word	0x2000006c
 8002514:	20003360 	.word	0x20003360

08002518 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
 8002522:	460b      	mov	r3, r1
 8002524:	80bb      	strh	r3, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	f1c3 0303 	rsb	r3, r3, #3
 8002532:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <BSP_LCD_FillCircle+0x114>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fce0 	bl	8001f08 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8002548:	e061      	b.n	800260e <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	b29b      	uxth	r3, r3
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b298      	uxth	r0, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	b29a      	uxth	r2, r3
 800255e:	88bb      	ldrh	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	b299      	uxth	r1, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	b29b      	uxth	r3, r3
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	f7ff fd67 	bl	8002040 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	b29b      	uxth	r3, r3
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	b298      	uxth	r0, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	b29b      	uxth	r3, r3
 8002580:	88ba      	ldrh	r2, [r7, #4]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b299      	uxth	r1, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	b29b      	uxth	r3, r3
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	f7ff fd56 	bl	8002040 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d021      	beq.n	80025de <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	b29b      	uxth	r3, r3
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b298      	uxth	r0, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	88ba      	ldrh	r2, [r7, #4]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b299      	uxth	r1, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7ff fd42 	bl	8002040 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b298      	uxth	r0, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	b299      	uxth	r1, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	f7ff fd31 	bl	8002040 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da06      	bge.n	80025f2 <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	009a      	lsls	r2, r3, #2
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4413      	add	r3, r2
 80025ec:	3306      	adds	r3, #6
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e00a      	b.n	8002608 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	4413      	add	r3, r2
 80025fe:	330a      	adds	r3, #10
 8002600:	617b      	str	r3, [r7, #20]
      CurY--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	3301      	adds	r3, #1
 800260c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	429a      	cmp	r2, r3
 8002614:	d999      	bls.n	800254a <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	88b9      	ldrh	r1, [r7, #4]
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe45 	bl	80022ac <BSP_LCD_DrawCircle>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20003360 	.word	0x20003360

08002630 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8002634:	4b02      	ldr	r3, [pc, #8]	; (8002640 <BSP_LCD_DisplayOn+0x10>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4798      	blx	r3
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2000006c 	.word	0x2000006c

08002644 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOff();
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <BSP_LCD_DisplayOff+0x10>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4798      	blx	r3
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2000006c 	.word	0x2000006c

08002658 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	603a      	str	r2, [r7, #0]
 8002662:	80fb      	strh	r3, [r7, #6]
 8002664:	460b      	mov	r3, r1
 8002666:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	82fb      	strh	r3, [r7, #22]
 8002678:	2300      	movs	r3, #0
 800267a:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8002688:	4b63      	ldr	r3, [pc, #396]	; (8002818 <DrawChar+0x1c0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	88db      	ldrh	r3, [r3, #6]
 800268e:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8002690:	4b61      	ldr	r3, [pc, #388]	; (8002818 <DrawChar+0x1c0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	889b      	ldrh	r3, [r3, #4]
 8002696:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8002698:	8afb      	ldrh	r3, [r7, #22]
 800269a:	8aba      	ldrh	r2, [r7, #20]
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	331b      	adds	r3, #27
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4a5d      	ldr	r2, [pc, #372]	; (800281c <DrawChar+0x1c4>)
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80026ae:	8afb      	ldrh	r3, [r7, #22]
 80026b0:	8aba      	ldrh	r2, [r7, #20]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	331b      	adds	r3, #27
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	141a      	asrs	r2, r3, #16
 80026bc:	4b58      	ldr	r3, [pc, #352]	; (8002820 <DrawChar+0x1c8>)
 80026be:	b292      	uxth	r2, r2
 80026c0:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80026c2:	4b58      	ldr	r3, [pc, #352]	; (8002824 <DrawChar+0x1cc>)
 80026c4:	2236      	movs	r2, #54	; 0x36
 80026c6:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80026c8:	4a57      	ldr	r2, [pc, #348]	; (8002828 <DrawChar+0x1d0>)
 80026ca:	8abb      	ldrh	r3, [r7, #20]
 80026cc:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80026ce:	8abb      	ldrh	r3, [r7, #20]
 80026d0:	141a      	asrs	r2, r3, #16
 80026d2:	4b56      	ldr	r3, [pc, #344]	; (800282c <DrawChar+0x1d4>)
 80026d4:	b292      	uxth	r2, r2
 80026d6:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80026d8:	4a55      	ldr	r2, [pc, #340]	; (8002830 <DrawChar+0x1d8>)
 80026da:	8afb      	ldrh	r3, [r7, #22]
 80026dc:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80026de:	8afb      	ldrh	r3, [r7, #22]
 80026e0:	141a      	asrs	r2, r3, #16
 80026e2:	4b54      	ldr	r3, [pc, #336]	; (8002834 <DrawChar+0x1dc>)
 80026e4:	b292      	uxth	r2, r2
 80026e6:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 80026e8:	8abb      	ldrh	r3, [r7, #20]
 80026ea:	3307      	adds	r3, #7
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da00      	bge.n	80026f2 <DrawChar+0x9a>
 80026f0:	3307      	adds	r3, #7
 80026f2:	10db      	asrs	r3, r3, #3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8abb      	ldrh	r3, [r7, #20]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	e078      	b.n	80027fa <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8002708:	8abb      	ldrh	r3, [r7, #20]
 800270a:	3307      	adds	r3, #7
 800270c:	2b00      	cmp	r3, #0
 800270e:	da00      	bge.n	8002712 <DrawChar+0xba>
 8002710:	3307      	adds	r3, #7
 8002712:	10db      	asrs	r3, r3, #3
 8002714:	461a      	mov	r2, r3
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	fb03 f302 	mul.w	r3, r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8002722:	8abb      	ldrh	r3, [r7, #20]
 8002724:	3b11      	subs	r3, #17
 8002726:	2b07      	cmp	r3, #7
 8002728:	d80c      	bhi.n	8002744 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	041a      	lsls	r2, r3, #16
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3301      	adds	r3, #1
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	4313      	orrs	r3, r2
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	3202      	adds	r2, #2
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8002744:	8abb      	ldrh	r3, [r7, #20]
 8002746:	3b09      	subs	r3, #9
 8002748:	2b07      	cmp	r3, #7
 800274a:	d807      	bhi.n	800275c <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	3201      	adds	r2, #1
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 800275c:	8abb      	ldrh	r3, [r7, #20]
 800275e:	3b01      	subs	r3, #1
 8002760:	2b07      	cmp	r3, #7
 8002762:	d802      	bhi.n	800276a <DrawChar+0x112>
    {
      line =  pchar[0];
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	e03d      	b.n	80027ec <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8002770:	8afa      	ldrh	r2, [r7, #22]
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	8aba      	ldrh	r2, [r7, #20]
 800277a:	fb02 f203 	mul.w	r2, r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	4413      	add	r3, r2
 8002782:	331b      	adds	r3, #27
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8002788:	8aba      	ldrh	r2, [r7, #20]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	1ad2      	subs	r2, r2, r3
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	4413      	add	r3, r2
 8002792:	3b01      	subs	r3, #1
 8002794:	2201      	movs	r2, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	461a      	mov	r2, r3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80027a4:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <DrawChar+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2d9      	uxtb	r1, r3
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <DrawChar+0x1e0>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	460a      	mov	r2, r1
 80027b2:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <DrawChar+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0a1a      	lsrs	r2, r3, #8
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	3301      	adds	r3, #1
 80027be:	b2d1      	uxtb	r1, r2
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <DrawChar+0x1e0>)
 80027c2:	54d1      	strb	r1, [r2, r3]
 80027c4:	e00f      	b.n	80027e6 <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <DrawChar+0x1c0>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b2d9      	uxtb	r1, r3
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <DrawChar+0x1e0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	460a      	mov	r2, r1
 80027d4:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <DrawChar+0x1c0>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0a1a      	lsrs	r2, r3, #8
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3301      	adds	r3, #1
 80027e0:	b2d1      	uxtb	r1, r2
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <DrawChar+0x1e0>)
 80027e4:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	3301      	adds	r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	8abb      	ldrh	r3, [r7, #20]
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3bd      	bcc.n	8002770 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	3301      	adds	r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	429a      	cmp	r2, r3
 8002800:	d382      	bcc.n	8002708 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8002802:	88b9      	ldrh	r1, [r7, #4]
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <DrawChar+0x1e0>)
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fe07 	bl	800241c <BSP_LCD_DrawBitmap>
}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20003360 	.word	0x20003360
 800281c:	2000010a 	.word	0x2000010a
 8002820:	2000010c 	.word	0x2000010c
 8002824:	20000112 	.word	0x20000112
 8002828:	2000011a 	.word	0x2000011a
 800282c:	2000011c 	.word	0x2000011c
 8002830:	2000011e 	.word	0x2000011e
 8002834:	20000120 	.word	0x20000120
 8002838:	20000108 	.word	0x20000108

0800283c <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	4623      	mov	r3, r4
 800284c:	80fb      	strh	r3, [r7, #6]
 800284e:	4603      	mov	r3, r0
 8002850:	80bb      	strh	r3, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	807b      	strh	r3, [r7, #2]
 8002856:	4613      	mov	r3, r2
 8002858:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <SetDisplayWindow+0x40>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SetDisplayWindow+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69dc      	ldr	r4, [r3, #28]
 800286a:	883b      	ldrh	r3, [r7, #0]
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	88b9      	ldrh	r1, [r7, #4]
 8002870:	88f8      	ldrh	r0, [r7, #6]
 8002872:	47a0      	blx	r4
  }  
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	2000006c 	.word	0x2000006c

08002880 <BSP_LCD_ReadID>:
  * @brief  Get display ID
  * @param  none
  * @retval ID number
  */
uint16_t BSP_LCD_ReadID(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  if(lcd_drv->ReadID)
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <BSP_LCD_ReadID+0x20>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <BSP_LCD_ReadID+0x1a>
    return lcd_drv->ReadID();
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <BSP_LCD_ReadID+0x20>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4798      	blx	r3
 8002896:	4603      	mov	r3, r0
 8002898:	e000      	b.n	800289c <BSP_LCD_ReadID+0x1c>
  else
    return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000006c 	.word	0x2000006c

080028a4 <BSP_LCD_ReadPixel>:
  * @param  Xpos: LCD X position
  * @param  Ypos: LCD Y position
  * @retval RGB565 pixel color
  */
uint16_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	460a      	mov	r2, r1
 80028ae:	80fb      	strh	r3, [r7, #6]
 80028b0:	4613      	mov	r3, r2
 80028b2:	80bb      	strh	r3, [r7, #4]
  if(lcd_drv->ReadPixel != NULL)
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <BSP_LCD_ReadPixel+0x38>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <BSP_LCD_ReadPixel+0x2c>
    return lcd_drv->ReadPixel(Xpos, Ypos);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <BSP_LCD_ReadPixel+0x38>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	88b9      	ldrh	r1, [r7, #4]
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	4610      	mov	r0, r2
 80028ca:	4798      	blx	r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	e000      	b.n	80028d2 <BSP_LCD_ReadPixel+0x2e>
  else
    return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000006c 	.word	0x2000006c

080028e0 <BSP_LCD_DrawRGB16Image>:
  * @param  Height: image height
  * @param  *pData: image data pointer
  * @retval None
  */
void BSP_LCD_DrawRGB16Image(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80028e0:	b5b0      	push	{r4, r5, r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	4604      	mov	r4, r0
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	80fb      	strh	r3, [r7, #6]
 80028f2:	4603      	mov	r3, r0
 80028f4:	80bb      	strh	r3, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]
 80028fa:	4613      	mov	r3, r2
 80028fc:	803b      	strh	r3, [r7, #0]
  lcd_drv->DrawRGBImage(Xpos, Ypos, Xsize, Ysize, pData);
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <BSP_LCD_DrawRGB16Image+0x3c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002904:	883d      	ldrh	r5, [r7, #0]
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	88b9      	ldrh	r1, [r7, #4]
 800290a:	88f8      	ldrh	r0, [r7, #6]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	462b      	mov	r3, r5
 8002912:	47a0      	blx	r4
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	2000006c 	.word	0x2000006c

08002920 <BSP_LCD_ReadRGB16Image>:
  * @param  Height: image height
  * @param  *pData: image data pointer
  * @retval *pData
  */
void BSP_LCD_ReadRGB16Image(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af02      	add	r7, sp, #8
 8002926:	4604      	mov	r4, r0
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4623      	mov	r3, r4
 8002930:	80fb      	strh	r3, [r7, #6]
 8002932:	4603      	mov	r3, r0
 8002934:	80bb      	strh	r3, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	803b      	strh	r3, [r7, #0]
  lcd_drv->ReadRGBImage(Xpos, Ypos, Xsize, Ysize, pData);
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <BSP_LCD_ReadRGB16Image+0x3c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8002944:	883d      	ldrh	r5, [r7, #0]
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	88b9      	ldrh	r1, [r7, #4]
 800294a:	88f8      	ldrh	r0, [r7, #6]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	462b      	mov	r3, r5
 8002952:	47a0      	blx	r4
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bdb0      	pop	{r4, r5, r7, pc}
 800295c:	2000006c 	.word	0x2000006c

08002960 <BSP_LCD_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void BSP_LCD_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
 800296a:	460b      	mov	r3, r1
 800296c:	80bb      	strh	r3, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	807b      	strh	r3, [r7, #2]
  lcd_drv->Scroll(Scroll, TopFix, BottonFix);
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <BSP_LCD_Scroll+0x2c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	887a      	ldrh	r2, [r7, #2]
 800297a:	88b9      	ldrh	r1, [r7, #4]
 800297c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002980:	4798      	blx	r3
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000006c 	.word	0x2000006c

08002990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002994:	f000 f9c6 	bl	8002d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002998:	f000 f805 	bl	80029a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800299c:	f000 f848 	bl	8002a30 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mainApp();
 80029a0:	f7fe fa6a 	bl	8000e78 <mainApp>
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <main+0x14>

080029a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b090      	sub	sp, #64	; 0x40
 80029aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ac:	f107 0318 	add.w	r3, r7, #24
 80029b0:	2228      	movs	r2, #40	; 0x28
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 ff31 	bl	800381c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d6:	2301      	movs	r3, #1
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029da:	2302      	movs	r3, #2
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ea:	f107 0318 	add.w	r3, r7, #24
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fb02 	bl	8002ff8 <HAL_RCC_OscConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <SystemClock_Config+0x58>
  {
    Error_Handler();
 80029fa:	f000 f847 	bl	8002a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029fe:	230f      	movs	r3, #15
 8002a00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a02:	2302      	movs	r3, #2
 8002a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fd6d 	bl	80034f8 <HAL_RCC_ClockConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a24:	f000 f832 	bl	8002a8c <Error_Handler>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3740      	adds	r7, #64	; 0x40
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a3c:	f043 0320 	orr.w	r3, r3, #32
 8002a40:	6193      	str	r3, [r2, #24]
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6193      	str	r3, [r2, #24]
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	6193      	str	r3, [r2, #24]
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <MX_GPIO_Init+0x58>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40021000 	.word	0x40021000

08002a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a90:	b672      	cpsid	i
}
 8002a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <Error_Handler+0x8>
	...

08002a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_MspInit+0x5c>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_MspInit+0x5c>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6193      	str	r3, [r2, #24]
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_MspInit+0x5c>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_MspInit+0x5c>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_MspInit+0x5c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_MspInit+0x5c>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_MspInit+0x60>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_MspInit+0x60>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010000 	.word	0x40010000

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <NMI_Handler+0x4>

08002b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <HardFault_Handler+0x4>

08002b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <MemManage_Handler+0x4>

08002b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <BusFault_Handler+0x4>

08002b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <UsageFault_Handler+0x4>

08002b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b42:	f000 f935 	bl	8002db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
	return 1;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <_kill>:

int _kill(int pid, int sig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b62:	f000 fe31 	bl	80037c8 <__errno>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2216      	movs	r2, #22
 8002b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_exit>:

void _exit (int status)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ffe7 	bl	8002b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b8a:	e7fe      	b.n	8002b8a <_exit+0x12>

08002b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e00a      	b.n	8002bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b9e:	f3af 8000 	nop.w
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60ba      	str	r2, [r7, #8]
 8002baa:	b2ca      	uxtb	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbf0      	blt.n	8002b9e <_read+0x12>
	}

return len;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e009      	b.n	8002bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	60ba      	str	r2, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbf1      	blt.n	8002bd8 <_write+0x12>
	}
	return len;
 8002bf4:	687b      	ldr	r3, [r7, #4]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_close>:

int _close(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c24:	605a      	str	r2, [r3, #4]
	return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <_isatty>:

int _isatty(int file)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
	return 1;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
	return 0;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <_sbrk+0x5c>)
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <_sbrk+0x60>)
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <_sbrk+0x64>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <_sbrk+0x64>)
 8002c7e:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <_sbrk+0x68>)
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <_sbrk+0x64>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d207      	bcs.n	8002ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c90:	f000 fd9a 	bl	80037c8 <__errno>
 8002c94:	4603      	mov	r3, r0
 8002c96:	220c      	movs	r2, #12
 8002c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	e009      	b.n	8002cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <_sbrk+0x64>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <_sbrk+0x64>)
 8002cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20005000 	.word	0x20005000
 8002cc0:	00000800 	.word	0x00000800
 8002cc4:	20000470 	.word	0x20000470
 8002cc8:	20003380 	.word	0x20003380

08002ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd8:	480c      	ldr	r0, [pc, #48]	; (8002d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce0:	e002      	b.n	8002ce8 <LoopCopyDataInit>

08002ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce6:	3304      	adds	r3, #4

08002ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cec:	d3f9      	bcc.n	8002ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cf0:	4c0a      	ldr	r4, [pc, #40]	; (8002d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf4:	e001      	b.n	8002cfa <LoopFillZerobss>

08002cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf8:	3204      	adds	r2, #4

08002cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cfc:	d3fb      	bcc.n	8002cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cfe:	f7ff ffe5 	bl	8002ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d02:	f000 fd67 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d06:	f7ff fe43 	bl	8002990 <main>
  bx lr
 8002d0a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d10:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002d14:	0800b870 	.word	0x0800b870
  ldr r2, =_sbss
 8002d18:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002d1c:	20003380 	.word	0x20003380

08002d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC1_2_IRQHandler>
	...

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_Init+0x28>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <HAL_Init+0x28>)
 8002d2e:	f043 0310 	orr.w	r3, r3, #16
 8002d32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d34:	2003      	movs	r0, #3
 8002d36:	f000 f92b 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f000 f808 	bl	8002d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d40:	f7ff feaa 	bl	8002a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40022000 	.word	0x40022000

08002d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_InitTick+0x54>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_InitTick+0x58>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f935 	bl	8002fde <HAL_SYSTICK_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00e      	b.n	8002d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d80a      	bhi.n	8002d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d84:	2200      	movs	r2, #0
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f000 f90b 	bl	8002fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <HAL_InitTick+0x5c>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000070 	.word	0x20000070
 8002da8:	20000078 	.word	0x20000078
 8002dac:	20000074 	.word	0x20000074

08002db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_IncTick+0x1c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_IncTick+0x20>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <HAL_IncTick+0x20>)
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000078 	.word	0x20000078
 8002dd0:	2000336c 	.word	0x2000336c

08002dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	; (8002de4 <HAL_GetTick+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	2000336c 	.word	0x2000336c

08002de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d005      	beq.n	8002e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_Delay+0x44>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e0e:	bf00      	nop
 8002e10:	f7ff ffe0 	bl	8002dd4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d8f7      	bhi.n	8002e10 <HAL_Delay+0x28>
  {
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000078 	.word	0x20000078

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5c:	d301      	bcc.n	8002f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <SysTick_Config+0x40>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f7ff ff90 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SysTick_Config+0x40>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SysTick_Config+0x40>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff49 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb8:	f7ff ff5e 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff90 	bl	8002ee8 <NVIC_EncodePriority>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff5f 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ffb0 	bl	8002f4c <SysTick_Config>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e26c      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8087 	beq.w	8003126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003018:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b04      	cmp	r3, #4
 8003022:	d00c      	beq.n	800303e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003024:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	d112      	bne.n	8003056 <HAL_RCC_OscConfig+0x5e>
 8003030:	4b8c      	ldr	r3, [pc, #560]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d10b      	bne.n	8003056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303e:	4b89      	ldr	r3, [pc, #548]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d06c      	beq.n	8003124 <HAL_RCC_OscConfig+0x12c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d168      	bne.n	8003124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e246      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x76>
 8003060:	4b80      	ldr	r3, [pc, #512]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a7f      	ldr	r2, [pc, #508]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	e02e      	b.n	80030cc <HAL_RCC_OscConfig+0xd4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x98>
 8003076:	4b7b      	ldr	r3, [pc, #492]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7a      	ldr	r2, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b78      	ldr	r3, [pc, #480]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a77      	ldr	r2, [pc, #476]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e01d      	b.n	80030cc <HAL_RCC_OscConfig+0xd4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0xbc>
 800309a:	4b72      	ldr	r3, [pc, #456]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a71      	ldr	r2, [pc, #452]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0xd4>
 80030b4:	4b6b      	ldr	r3, [pc, #428]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b68      	ldr	r3, [pc, #416]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fe7e 	bl	8002dd4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fe7a 	bl	8002dd4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1fa      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0xe4>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7ff fe6a 	bl	8002dd4 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7ff fe66 	bl	8002dd4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1e6      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x10c>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003132:	4b4c      	ldr	r3, [pc, #304]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800313e:	4b49      	ldr	r3, [pc, #292]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d11c      	bne.n	8003184 <HAL_RCC_OscConfig+0x18c>
 800314a:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x176>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e1ba      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4939      	ldr	r1, [pc, #228]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	e03a      	b.n	80031fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7ff fe1f 	bl	8002dd4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319a:	f7ff fe1b 	bl	8002dd4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e19b      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4927      	ldr	r1, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff fdfe 	bl	8002dd4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7ff fdfa 	bl	8002dd4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e17a      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03a      	beq.n	800327c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_RCC_OscConfig+0x274>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7ff fdde 	bl	8002dd4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7ff fdda 	bl	8002dd4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e15a      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f000 faa6 	bl	800378c <RCC_Delay>
 8003240:	e01c      	b.n	800327c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCC_OscConfig+0x274>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7ff fdc4 	bl	8002dd4 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324e:	e00f      	b.n	8003270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7ff fdc0 	bl	8002dd4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d908      	bls.n	8003270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e140      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	42420000 	.word	0x42420000
 800326c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	4b9e      	ldr	r3, [pc, #632]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e9      	bne.n	8003250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a6 	beq.w	80033d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328e:	4b97      	ldr	r3, [pc, #604]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b94      	ldr	r3, [pc, #592]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4a93      	ldr	r2, [pc, #588]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	61d3      	str	r3, [r2, #28]
 80032a6:	4b91      	ldr	r3, [pc, #580]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b8e      	ldr	r3, [pc, #568]	; (80034f0 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c2:	4b8b      	ldr	r3, [pc, #556]	; (80034f0 <HAL_RCC_OscConfig+0x4f8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a8a      	ldr	r2, [pc, #552]	; (80034f0 <HAL_RCC_OscConfig+0x4f8>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7ff fd81 	bl	8002dd4 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7ff fd7d 	bl	8002dd4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b64      	cmp	r3, #100	; 0x64
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0fd      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x312>
 80032fc:	4b7b      	ldr	r3, [pc, #492]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4a7a      	ldr	r2, [pc, #488]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e02d      	b.n	8003366 <HAL_RCC_OscConfig+0x36e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x334>
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4a75      	ldr	r2, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6213      	str	r3, [r2, #32]
 800331e:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a72      	ldr	r2, [pc, #456]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6213      	str	r3, [r2, #32]
 800332a:	e01c      	b.n	8003366 <HAL_RCC_OscConfig+0x36e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b05      	cmp	r3, #5
 8003332:	d10c      	bne.n	800334e <HAL_RCC_OscConfig+0x356>
 8003334:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4a6c      	ldr	r2, [pc, #432]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a69      	ldr	r2, [pc, #420]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	e00b      	b.n	8003366 <HAL_RCC_OscConfig+0x36e>
 800334e:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a66      	ldr	r2, [pc, #408]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b64      	ldr	r3, [pc, #400]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a63      	ldr	r2, [pc, #396]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d015      	beq.n	800339a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7ff fd31 	bl	8002dd4 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7ff fd2d 	bl	8002dd4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0ab      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b57      	ldr	r3, [pc, #348]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCC_OscConfig+0x37e>
 8003398:	e014      	b.n	80033c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7ff fd1b 	bl	8002dd4 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7ff fd17 	bl	8002dd4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e095      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b8:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ee      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ca:	4b48      	ldr	r3, [pc, #288]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8081 	beq.w	80034e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d061      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d146      	bne.n	8003482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f4:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_RCC_OscConfig+0x4fc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7ff fceb 	bl	8002dd4 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7ff fce7 	bl	8002dd4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e067      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d108      	bne.n	800343c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342a:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	492d      	ldr	r1, [pc, #180]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a19      	ldr	r1, [r3, #32]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	430b      	orrs	r3, r1
 800344e:	4927      	ldr	r1, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_OscConfig+0x4fc>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7ff fcbb 	bl	8002dd4 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7ff fcb7 	bl	8002dd4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e037      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x46a>
 8003480:	e02f      	b.n	80034e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_RCC_OscConfig+0x4fc>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff fca4 	bl	8002dd4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7ff fca0 	bl	8002dd4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e020      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x498>
 80034ae:	e018      	b.n	80034e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e013      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x4f4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	42420060 	.word	0x42420060

080034f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0d0      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d910      	bls.n	800353c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	4965      	ldr	r1, [pc, #404]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0b8      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800355e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b50      	ldr	r3, [pc, #320]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	494d      	ldr	r1, [pc, #308]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d040      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d115      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e073      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06b      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4936      	ldr	r1, [pc, #216]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7ff fbf4 	bl	8002dd4 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7ff fbf0 	bl	8002dd4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e053      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d210      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4922      	ldr	r1, [pc, #136]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e032      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4916      	ldr	r1, [pc, #88]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003686:	f000 f821 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800368a:	4602      	mov	r2, r0
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	490a      	ldr	r1, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	5ccb      	ldrb	r3, [r1, r3]
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1cc>)
 80036a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1d0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fb52 	bl	8002d50 <HAL_InitTick>

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	0800b70c 	.word	0x0800b70c
 80036c4:	20000070 	.word	0x20000070
 80036c8:	20000074 	.word	0x20000074

080036cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b490      	push	{r4, r7}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036d4:	1d3c      	adds	r4, r7, #4
 80036d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036dc:	f240 2301 	movw	r3, #513	; 0x201
 80036e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x40>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x46>
 800370a:	e02d      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb8>)
 800370e:	623b      	str	r3, [r7, #32]
      break;
 8003710:	e02d      	b.n	800376e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	0c9b      	lsrs	r3, r3, #18
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800371e:	4413      	add	r3, r2
 8003720:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003724:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003730:	4b13      	ldr	r3, [pc, #76]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c5b      	lsrs	r3, r3, #17
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800373e:	4413      	add	r3, r2
 8003740:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003744:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb8>)
 800374a:	fb02 f203 	mul.w	r2, r2, r3
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e004      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <HAL_RCC_GetSysClockFreq+0xbc>)
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	623b      	str	r3, [r7, #32]
      break;
 8003766:	e002      	b.n	800376e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376a:	623b      	str	r3, [r7, #32]
      break;
 800376c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376e:	6a3b      	ldr	r3, [r7, #32]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bc90      	pop	{r4, r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	08004b04 	.word	0x08004b04
 8003780:	40021000 	.word	0x40021000
 8003784:	007a1200 	.word	0x007a1200
 8003788:	003d0900 	.word	0x003d0900

0800378c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <RCC_Delay+0x34>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <RCC_Delay+0x38>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0a5b      	lsrs	r3, r3, #9
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037a8:	bf00      	nop
  }
  while (Delay --);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f9      	bne.n	80037a8 <RCC_Delay+0x1c>
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000070 	.word	0x20000070
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <__errno>:
 80037c8:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <__errno+0x8>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	2000007c 	.word	0x2000007c

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	2600      	movs	r6, #0
 80037d8:	4d0c      	ldr	r5, [pc, #48]	; (800380c <__libc_init_array+0x38>)
 80037da:	4c0d      	ldr	r4, [pc, #52]	; (8003810 <__libc_init_array+0x3c>)
 80037dc:	1b64      	subs	r4, r4, r5
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	f001 f8bc 	bl	8004960 <_init>
 80037e8:	2600      	movs	r6, #0
 80037ea:	4d0a      	ldr	r5, [pc, #40]	; (8003814 <__libc_init_array+0x40>)
 80037ec:	4c0a      	ldr	r4, [pc, #40]	; (8003818 <__libc_init_array+0x44>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	42a6      	cmp	r6, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fc:	4798      	blx	r3
 80037fe:	3601      	adds	r6, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	f855 3b04 	ldr.w	r3, [r5], #4
 8003806:	4798      	blx	r3
 8003808:	3601      	adds	r6, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	0800b868 	.word	0x0800b868
 8003810:	0800b868 	.word	0x0800b868
 8003814:	0800b868 	.word	0x0800b868
 8003818:	0800b86c 	.word	0x0800b86c

0800381c <memset>:
 800381c:	4603      	mov	r3, r0
 800381e:	4402      	add	r2, r0
 8003820:	4293      	cmp	r3, r2
 8003822:	d100      	bne.n	8003826 <memset+0xa>
 8003824:	4770      	bx	lr
 8003826:	f803 1b01 	strb.w	r1, [r3], #1
 800382a:	e7f9      	b.n	8003820 <memset+0x4>

0800382c <iprintf>:
 800382c:	b40f      	push	{r0, r1, r2, r3}
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <iprintf+0x2c>)
 8003830:	b513      	push	{r0, r1, r4, lr}
 8003832:	681c      	ldr	r4, [r3, #0]
 8003834:	b124      	cbz	r4, 8003840 <iprintf+0x14>
 8003836:	69a3      	ldr	r3, [r4, #24]
 8003838:	b913      	cbnz	r3, 8003840 <iprintf+0x14>
 800383a:	4620      	mov	r0, r4
 800383c:	f000 fabc 	bl	8003db8 <__sinit>
 8003840:	ab05      	add	r3, sp, #20
 8003842:	4620      	mov	r0, r4
 8003844:	9a04      	ldr	r2, [sp, #16]
 8003846:	68a1      	ldr	r1, [r4, #8]
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	f000 fca1 	bl	8004190 <_vfiprintf_r>
 800384e:	b002      	add	sp, #8
 8003850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003854:	b004      	add	sp, #16
 8003856:	4770      	bx	lr
 8003858:	2000007c 	.word	0x2000007c

0800385c <_puts_r>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	460e      	mov	r6, r1
 8003860:	4605      	mov	r5, r0
 8003862:	b118      	cbz	r0, 800386c <_puts_r+0x10>
 8003864:	6983      	ldr	r3, [r0, #24]
 8003866:	b90b      	cbnz	r3, 800386c <_puts_r+0x10>
 8003868:	f000 faa6 	bl	8003db8 <__sinit>
 800386c:	69ab      	ldr	r3, [r5, #24]
 800386e:	68ac      	ldr	r4, [r5, #8]
 8003870:	b913      	cbnz	r3, 8003878 <_puts_r+0x1c>
 8003872:	4628      	mov	r0, r5
 8003874:	f000 faa0 	bl	8003db8 <__sinit>
 8003878:	4b2c      	ldr	r3, [pc, #176]	; (800392c <_puts_r+0xd0>)
 800387a:	429c      	cmp	r4, r3
 800387c:	d120      	bne.n	80038c0 <_puts_r+0x64>
 800387e:	686c      	ldr	r4, [r5, #4]
 8003880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003882:	07db      	lsls	r3, r3, #31
 8003884:	d405      	bmi.n	8003892 <_puts_r+0x36>
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	0598      	lsls	r0, r3, #22
 800388a:	d402      	bmi.n	8003892 <_puts_r+0x36>
 800388c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800388e:	f000 fb43 	bl	8003f18 <__retarget_lock_acquire_recursive>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	0719      	lsls	r1, r3, #28
 8003896:	d51d      	bpl.n	80038d4 <_puts_r+0x78>
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	b1db      	cbz	r3, 80038d4 <_puts_r+0x78>
 800389c:	3e01      	subs	r6, #1
 800389e:	68a3      	ldr	r3, [r4, #8]
 80038a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60a3      	str	r3, [r4, #8]
 80038a8:	bb39      	cbnz	r1, 80038fa <_puts_r+0x9e>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da38      	bge.n	8003920 <_puts_r+0xc4>
 80038ae:	4622      	mov	r2, r4
 80038b0:	210a      	movs	r1, #10
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 f888 	bl	80039c8 <__swbuf_r>
 80038b8:	3001      	adds	r0, #1
 80038ba:	d011      	beq.n	80038e0 <_puts_r+0x84>
 80038bc:	250a      	movs	r5, #10
 80038be:	e011      	b.n	80038e4 <_puts_r+0x88>
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <_puts_r+0xd4>)
 80038c2:	429c      	cmp	r4, r3
 80038c4:	d101      	bne.n	80038ca <_puts_r+0x6e>
 80038c6:	68ac      	ldr	r4, [r5, #8]
 80038c8:	e7da      	b.n	8003880 <_puts_r+0x24>
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <_puts_r+0xd8>)
 80038cc:	429c      	cmp	r4, r3
 80038ce:	bf08      	it	eq
 80038d0:	68ec      	ldreq	r4, [r5, #12]
 80038d2:	e7d5      	b.n	8003880 <_puts_r+0x24>
 80038d4:	4621      	mov	r1, r4
 80038d6:	4628      	mov	r0, r5
 80038d8:	f000 f8c8 	bl	8003a6c <__swsetup_r>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d0dd      	beq.n	800389c <_puts_r+0x40>
 80038e0:	f04f 35ff 	mov.w	r5, #4294967295
 80038e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038e6:	07da      	lsls	r2, r3, #31
 80038e8:	d405      	bmi.n	80038f6 <_puts_r+0x9a>
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	059b      	lsls	r3, r3, #22
 80038ee:	d402      	bmi.n	80038f6 <_puts_r+0x9a>
 80038f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038f2:	f000 fb12 	bl	8003f1a <__retarget_lock_release_recursive>
 80038f6:	4628      	mov	r0, r5
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da04      	bge.n	8003908 <_puts_r+0xac>
 80038fe:	69a2      	ldr	r2, [r4, #24]
 8003900:	429a      	cmp	r2, r3
 8003902:	dc06      	bgt.n	8003912 <_puts_r+0xb6>
 8003904:	290a      	cmp	r1, #10
 8003906:	d004      	beq.n	8003912 <_puts_r+0xb6>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	6022      	str	r2, [r4, #0]
 800390e:	7019      	strb	r1, [r3, #0]
 8003910:	e7c5      	b.n	800389e <_puts_r+0x42>
 8003912:	4622      	mov	r2, r4
 8003914:	4628      	mov	r0, r5
 8003916:	f000 f857 	bl	80039c8 <__swbuf_r>
 800391a:	3001      	adds	r0, #1
 800391c:	d1bf      	bne.n	800389e <_puts_r+0x42>
 800391e:	e7df      	b.n	80038e0 <_puts_r+0x84>
 8003920:	250a      	movs	r5, #10
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	6022      	str	r2, [r4, #0]
 8003928:	701d      	strb	r5, [r3, #0]
 800392a:	e7db      	b.n	80038e4 <_puts_r+0x88>
 800392c:	0800b7f4 	.word	0x0800b7f4
 8003930:	0800b814 	.word	0x0800b814
 8003934:	0800b7d4 	.word	0x0800b7d4

08003938 <puts>:
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <puts+0xc>)
 800393a:	4601      	mov	r1, r0
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	f7ff bf8d 	b.w	800385c <_puts_r>
 8003942:	bf00      	nop
 8003944:	2000007c 	.word	0x2000007c

08003948 <random>:
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <random+0x60>)
 800394a:	b510      	push	{r4, lr}
 800394c:	681c      	ldr	r4, [r3, #0]
 800394e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003950:	b9b3      	cbnz	r3, 8003980 <random+0x38>
 8003952:	2018      	movs	r0, #24
 8003954:	f000 fb46 	bl	8003fe4 <malloc>
 8003958:	4602      	mov	r2, r0
 800395a:	63a0      	str	r0, [r4, #56]	; 0x38
 800395c:	b920      	cbnz	r0, 8003968 <random+0x20>
 800395e:	214c      	movs	r1, #76	; 0x4c
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <random+0x64>)
 8003962:	4813      	ldr	r0, [pc, #76]	; (80039b0 <random+0x68>)
 8003964:	f000 f8f0 	bl	8003b48 <__assert_func>
 8003968:	4912      	ldr	r1, [pc, #72]	; (80039b4 <random+0x6c>)
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <random+0x70>)
 800396c:	e9c0 1300 	strd	r1, r3, [r0]
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <random+0x74>)
 8003972:	2100      	movs	r1, #0
 8003974:	6083      	str	r3, [r0, #8]
 8003976:	230b      	movs	r3, #11
 8003978:	8183      	strh	r3, [r0, #12]
 800397a:	2001      	movs	r0, #1
 800397c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003980:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003982:	480f      	ldr	r0, [pc, #60]	; (80039c0 <random+0x78>)
 8003984:	690a      	ldr	r2, [r1, #16]
 8003986:	694b      	ldr	r3, [r1, #20]
 8003988:	4350      	muls	r0, r2
 800398a:	4c0e      	ldr	r4, [pc, #56]	; (80039c4 <random+0x7c>)
 800398c:	fb04 0003 	mla	r0, r4, r3, r0
 8003990:	fba2 3404 	umull	r3, r4, r2, r4
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4404      	add	r4, r0
 8003998:	f144 0000 	adc.w	r0, r4, #0
 800399c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80039a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	bf00      	nop
 80039a8:	2000007c 	.word	0x2000007c
 80039ac:	0800b720 	.word	0x0800b720
 80039b0:	0800b737 	.word	0x0800b737
 80039b4:	abcd330e 	.word	0xabcd330e
 80039b8:	e66d1234 	.word	0xe66d1234
 80039bc:	0005deec 	.word	0x0005deec
 80039c0:	5851f42d 	.word	0x5851f42d
 80039c4:	4c957f2d 	.word	0x4c957f2d

080039c8 <__swbuf_r>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	460e      	mov	r6, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	4605      	mov	r5, r0
 80039d0:	b118      	cbz	r0, 80039da <__swbuf_r+0x12>
 80039d2:	6983      	ldr	r3, [r0, #24]
 80039d4:	b90b      	cbnz	r3, 80039da <__swbuf_r+0x12>
 80039d6:	f000 f9ef 	bl	8003db8 <__sinit>
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <__swbuf_r+0x98>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	d12b      	bne.n	8003a38 <__swbuf_r+0x70>
 80039e0:	686c      	ldr	r4, [r5, #4]
 80039e2:	69a3      	ldr	r3, [r4, #24]
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	071a      	lsls	r2, r3, #28
 80039ea:	d52f      	bpl.n	8003a4c <__swbuf_r+0x84>
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	b36b      	cbz	r3, 8003a4c <__swbuf_r+0x84>
 80039f0:	6923      	ldr	r3, [r4, #16]
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	b2f6      	uxtb	r6, r6
 80039f6:	1ac0      	subs	r0, r0, r3
 80039f8:	6963      	ldr	r3, [r4, #20]
 80039fa:	4637      	mov	r7, r6
 80039fc:	4283      	cmp	r3, r0
 80039fe:	dc04      	bgt.n	8003a0a <__swbuf_r+0x42>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 f944 	bl	8003c90 <_fflush_r>
 8003a08:	bb30      	cbnz	r0, 8003a58 <__swbuf_r+0x90>
 8003a0a:	68a3      	ldr	r3, [r4, #8]
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	60a3      	str	r3, [r4, #8]
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	6022      	str	r2, [r4, #0]
 8003a18:	701e      	strb	r6, [r3, #0]
 8003a1a:	6963      	ldr	r3, [r4, #20]
 8003a1c:	4283      	cmp	r3, r0
 8003a1e:	d004      	beq.n	8003a2a <__swbuf_r+0x62>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	07db      	lsls	r3, r3, #31
 8003a24:	d506      	bpl.n	8003a34 <__swbuf_r+0x6c>
 8003a26:	2e0a      	cmp	r6, #10
 8003a28:	d104      	bne.n	8003a34 <__swbuf_r+0x6c>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 f92f 	bl	8003c90 <_fflush_r>
 8003a32:	b988      	cbnz	r0, 8003a58 <__swbuf_r+0x90>
 8003a34:	4638      	mov	r0, r7
 8003a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <__swbuf_r+0x9c>)
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	d101      	bne.n	8003a42 <__swbuf_r+0x7a>
 8003a3e:	68ac      	ldr	r4, [r5, #8]
 8003a40:	e7cf      	b.n	80039e2 <__swbuf_r+0x1a>
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <__swbuf_r+0xa0>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	bf08      	it	eq
 8003a48:	68ec      	ldreq	r4, [r5, #12]
 8003a4a:	e7ca      	b.n	80039e2 <__swbuf_r+0x1a>
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 f80c 	bl	8003a6c <__swsetup_r>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d0cb      	beq.n	80039f0 <__swbuf_r+0x28>
 8003a58:	f04f 37ff 	mov.w	r7, #4294967295
 8003a5c:	e7ea      	b.n	8003a34 <__swbuf_r+0x6c>
 8003a5e:	bf00      	nop
 8003a60:	0800b7f4 	.word	0x0800b7f4
 8003a64:	0800b814 	.word	0x0800b814
 8003a68:	0800b7d4 	.word	0x0800b7d4

08003a6c <__swsetup_r>:
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <__swsetup_r+0xcc>)
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	681d      	ldr	r5, [r3, #0]
 8003a72:	4606      	mov	r6, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	b125      	cbz	r5, 8003a82 <__swsetup_r+0x16>
 8003a78:	69ab      	ldr	r3, [r5, #24]
 8003a7a:	b913      	cbnz	r3, 8003a82 <__swsetup_r+0x16>
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 f99b 	bl	8003db8 <__sinit>
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <__swsetup_r+0xd0>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	d10f      	bne.n	8003aa8 <__swsetup_r+0x3c>
 8003a88:	686c      	ldr	r4, [r5, #4]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a90:	0719      	lsls	r1, r3, #28
 8003a92:	d42c      	bmi.n	8003aee <__swsetup_r+0x82>
 8003a94:	06dd      	lsls	r5, r3, #27
 8003a96:	d411      	bmi.n	8003abc <__swsetup_r+0x50>
 8003a98:	2309      	movs	r3, #9
 8003a9a:	6033      	str	r3, [r6, #0]
 8003a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	e03e      	b.n	8003b26 <__swsetup_r+0xba>
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <__swsetup_r+0xd4>)
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d101      	bne.n	8003ab2 <__swsetup_r+0x46>
 8003aae:	68ac      	ldr	r4, [r5, #8]
 8003ab0:	e7eb      	b.n	8003a8a <__swsetup_r+0x1e>
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <__swsetup_r+0xd8>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	bf08      	it	eq
 8003ab8:	68ec      	ldreq	r4, [r5, #12]
 8003aba:	e7e6      	b.n	8003a8a <__swsetup_r+0x1e>
 8003abc:	0758      	lsls	r0, r3, #29
 8003abe:	d512      	bpl.n	8003ae6 <__swsetup_r+0x7a>
 8003ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac2:	b141      	cbz	r1, 8003ad6 <__swsetup_r+0x6a>
 8003ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	d002      	beq.n	8003ad2 <__swsetup_r+0x66>
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 fa91 	bl	8003ff4 <_free_r>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	f043 0308 	orr.w	r3, r3, #8
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	b94b      	cbnz	r3, 8003b06 <__swsetup_r+0x9a>
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d003      	beq.n	8003b06 <__swsetup_r+0x9a>
 8003afe:	4621      	mov	r1, r4
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 fa2f 	bl	8003f64 <__smakebuf_r>
 8003b06:	89a0      	ldrh	r0, [r4, #12]
 8003b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b0c:	f010 0301 	ands.w	r3, r0, #1
 8003b10:	d00a      	beq.n	8003b28 <__swsetup_r+0xbc>
 8003b12:	2300      	movs	r3, #0
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	6963      	ldr	r3, [r4, #20]
 8003b18:	425b      	negs	r3, r3
 8003b1a:	61a3      	str	r3, [r4, #24]
 8003b1c:	6923      	ldr	r3, [r4, #16]
 8003b1e:	b943      	cbnz	r3, 8003b32 <__swsetup_r+0xc6>
 8003b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b24:	d1ba      	bne.n	8003a9c <__swsetup_r+0x30>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	0781      	lsls	r1, r0, #30
 8003b2a:	bf58      	it	pl
 8003b2c:	6963      	ldrpl	r3, [r4, #20]
 8003b2e:	60a3      	str	r3, [r4, #8]
 8003b30:	e7f4      	b.n	8003b1c <__swsetup_r+0xb0>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e7f7      	b.n	8003b26 <__swsetup_r+0xba>
 8003b36:	bf00      	nop
 8003b38:	2000007c 	.word	0x2000007c
 8003b3c:	0800b7f4 	.word	0x0800b7f4
 8003b40:	0800b814 	.word	0x0800b814
 8003b44:	0800b7d4 	.word	0x0800b7d4

08003b48 <__assert_func>:
 8003b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <__assert_func+0x2c>)
 8003b50:	4605      	mov	r5, r0
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68d8      	ldr	r0, [r3, #12]
 8003b56:	b14c      	cbz	r4, 8003b6c <__assert_func+0x24>
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <__assert_func+0x30>)
 8003b5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b5e:	9100      	str	r1, [sp, #0]
 8003b60:	462b      	mov	r3, r5
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <__assert_func+0x34>)
 8003b64:	f000 f9a6 	bl	8003eb4 <fiprintf>
 8003b68:	f000 fe3e 	bl	80047e8 <abort>
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <__assert_func+0x38>)
 8003b6e:	461c      	mov	r4, r3
 8003b70:	e7f3      	b.n	8003b5a <__assert_func+0x12>
 8003b72:	bf00      	nop
 8003b74:	2000007c 	.word	0x2000007c
 8003b78:	0800b798 	.word	0x0800b798
 8003b7c:	0800b7a5 	.word	0x0800b7a5
 8003b80:	0800b7d3 	.word	0x0800b7d3

08003b84 <__sflush_r>:
 8003b84:	898a      	ldrh	r2, [r1, #12]
 8003b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	0710      	lsls	r0, r2, #28
 8003b8e:	460c      	mov	r4, r1
 8003b90:	d458      	bmi.n	8003c44 <__sflush_r+0xc0>
 8003b92:	684b      	ldr	r3, [r1, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	dc05      	bgt.n	8003ba4 <__sflush_r+0x20>
 8003b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	dc02      	bgt.n	8003ba4 <__sflush_r+0x20>
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	d0f9      	beq.n	8003b9e <__sflush_r+0x1a>
 8003baa:	2300      	movs	r3, #0
 8003bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bb0:	682f      	ldr	r7, [r5, #0]
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	d032      	beq.n	8003c1c <__sflush_r+0x98>
 8003bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	075a      	lsls	r2, r3, #29
 8003bbc:	d505      	bpl.n	8003bca <__sflush_r+0x46>
 8003bbe:	6863      	ldr	r3, [r4, #4]
 8003bc0:	1ac0      	subs	r0, r0, r3
 8003bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bc4:	b10b      	cbz	r3, 8003bca <__sflush_r+0x46>
 8003bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bc8:	1ac0      	subs	r0, r0, r3
 8003bca:	2300      	movs	r3, #0
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	6a21      	ldr	r1, [r4, #32]
 8003bd4:	47b0      	blx	r6
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	d106      	bne.n	8003bea <__sflush_r+0x66>
 8003bdc:	6829      	ldr	r1, [r5, #0]
 8003bde:	291d      	cmp	r1, #29
 8003be0:	d82c      	bhi.n	8003c3c <__sflush_r+0xb8>
 8003be2:	4a2a      	ldr	r2, [pc, #168]	; (8003c8c <__sflush_r+0x108>)
 8003be4:	40ca      	lsrs	r2, r1
 8003be6:	07d6      	lsls	r6, r2, #31
 8003be8:	d528      	bpl.n	8003c3c <__sflush_r+0xb8>
 8003bea:	2200      	movs	r2, #0
 8003bec:	6062      	str	r2, [r4, #4]
 8003bee:	6922      	ldr	r2, [r4, #16]
 8003bf0:	04d9      	lsls	r1, r3, #19
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	d504      	bpl.n	8003c00 <__sflush_r+0x7c>
 8003bf6:	1c42      	adds	r2, r0, #1
 8003bf8:	d101      	bne.n	8003bfe <__sflush_r+0x7a>
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	b903      	cbnz	r3, 8003c00 <__sflush_r+0x7c>
 8003bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8003c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c02:	602f      	str	r7, [r5, #0]
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d0ca      	beq.n	8003b9e <__sflush_r+0x1a>
 8003c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	d002      	beq.n	8003c16 <__sflush_r+0x92>
 8003c10:	4628      	mov	r0, r5
 8003c12:	f000 f9ef 	bl	8003ff4 <_free_r>
 8003c16:	2000      	movs	r0, #0
 8003c18:	6360      	str	r0, [r4, #52]	; 0x34
 8003c1a:	e7c1      	b.n	8003ba0 <__sflush_r+0x1c>
 8003c1c:	6a21      	ldr	r1, [r4, #32]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b0      	blx	r6
 8003c24:	1c41      	adds	r1, r0, #1
 8003c26:	d1c7      	bne.n	8003bb8 <__sflush_r+0x34>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0c4      	beq.n	8003bb8 <__sflush_r+0x34>
 8003c2e:	2b1d      	cmp	r3, #29
 8003c30:	d001      	beq.n	8003c36 <__sflush_r+0xb2>
 8003c32:	2b16      	cmp	r3, #22
 8003c34:	d101      	bne.n	8003c3a <__sflush_r+0xb6>
 8003c36:	602f      	str	r7, [r5, #0]
 8003c38:	e7b1      	b.n	8003b9e <__sflush_r+0x1a>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	e7ad      	b.n	8003ba0 <__sflush_r+0x1c>
 8003c44:	690f      	ldr	r7, [r1, #16]
 8003c46:	2f00      	cmp	r7, #0
 8003c48:	d0a9      	beq.n	8003b9e <__sflush_r+0x1a>
 8003c4a:	0793      	lsls	r3, r2, #30
 8003c4c:	bf18      	it	ne
 8003c4e:	2300      	movne	r3, #0
 8003c50:	680e      	ldr	r6, [r1, #0]
 8003c52:	bf08      	it	eq
 8003c54:	694b      	ldreq	r3, [r1, #20]
 8003c56:	eba6 0807 	sub.w	r8, r6, r7
 8003c5a:	600f      	str	r7, [r1, #0]
 8003c5c:	608b      	str	r3, [r1, #8]
 8003c5e:	f1b8 0f00 	cmp.w	r8, #0
 8003c62:	dd9c      	ble.n	8003b9e <__sflush_r+0x1a>
 8003c64:	4643      	mov	r3, r8
 8003c66:	463a      	mov	r2, r7
 8003c68:	4628      	mov	r0, r5
 8003c6a:	6a21      	ldr	r1, [r4, #32]
 8003c6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c6e:	47b0      	blx	r6
 8003c70:	2800      	cmp	r0, #0
 8003c72:	dc06      	bgt.n	8003c82 <__sflush_r+0xfe>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	e78e      	b.n	8003ba0 <__sflush_r+0x1c>
 8003c82:	4407      	add	r7, r0
 8003c84:	eba8 0800 	sub.w	r8, r8, r0
 8003c88:	e7e9      	b.n	8003c5e <__sflush_r+0xda>
 8003c8a:	bf00      	nop
 8003c8c:	20400001 	.word	0x20400001

08003c90 <_fflush_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	4605      	mov	r5, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	b913      	cbnz	r3, 8003ca0 <_fflush_r+0x10>
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	b118      	cbz	r0, 8003caa <_fflush_r+0x1a>
 8003ca2:	6983      	ldr	r3, [r0, #24]
 8003ca4:	b90b      	cbnz	r3, 8003caa <_fflush_r+0x1a>
 8003ca6:	f000 f887 	bl	8003db8 <__sinit>
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <_fflush_r+0x6c>)
 8003cac:	429c      	cmp	r4, r3
 8003cae:	d11b      	bne.n	8003ce8 <_fflush_r+0x58>
 8003cb0:	686c      	ldr	r4, [r5, #4]
 8003cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ef      	beq.n	8003c9a <_fflush_r+0xa>
 8003cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cbc:	07d0      	lsls	r0, r2, #31
 8003cbe:	d404      	bmi.n	8003cca <_fflush_r+0x3a>
 8003cc0:	0599      	lsls	r1, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <_fflush_r+0x3a>
 8003cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cc6:	f000 f927 	bl	8003f18 <__retarget_lock_acquire_recursive>
 8003cca:	4628      	mov	r0, r5
 8003ccc:	4621      	mov	r1, r4
 8003cce:	f7ff ff59 	bl	8003b84 <__sflush_r>
 8003cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	07da      	lsls	r2, r3, #31
 8003cd8:	d4e0      	bmi.n	8003c9c <_fflush_r+0xc>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	059b      	lsls	r3, r3, #22
 8003cde:	d4dd      	bmi.n	8003c9c <_fflush_r+0xc>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce2:	f000 f91a 	bl	8003f1a <__retarget_lock_release_recursive>
 8003ce6:	e7d9      	b.n	8003c9c <_fflush_r+0xc>
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <_fflush_r+0x70>)
 8003cea:	429c      	cmp	r4, r3
 8003cec:	d101      	bne.n	8003cf2 <_fflush_r+0x62>
 8003cee:	68ac      	ldr	r4, [r5, #8]
 8003cf0:	e7df      	b.n	8003cb2 <_fflush_r+0x22>
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <_fflush_r+0x74>)
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	bf08      	it	eq
 8003cf8:	68ec      	ldreq	r4, [r5, #12]
 8003cfa:	e7da      	b.n	8003cb2 <_fflush_r+0x22>
 8003cfc:	0800b7f4 	.word	0x0800b7f4
 8003d00:	0800b814 	.word	0x0800b814
 8003d04:	0800b7d4 	.word	0x0800b7d4

08003d08 <std>:
 8003d08:	2300      	movs	r3, #0
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d16:	6083      	str	r3, [r0, #8]
 8003d18:	8181      	strh	r1, [r0, #12]
 8003d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d1c:	81c2      	strh	r2, [r0, #14]
 8003d1e:	6183      	str	r3, [r0, #24]
 8003d20:	4619      	mov	r1, r3
 8003d22:	2208      	movs	r2, #8
 8003d24:	305c      	adds	r0, #92	; 0x5c
 8003d26:	f7ff fd79 	bl	800381c <memset>
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <std+0x38>)
 8003d2c:	6224      	str	r4, [r4, #32]
 8003d2e:	6263      	str	r3, [r4, #36]	; 0x24
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <std+0x3c>)
 8003d32:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <std+0x40>)
 8003d36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <std+0x44>)
 8003d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	bf00      	nop
 8003d40:	0800473d 	.word	0x0800473d
 8003d44:	0800475f 	.word	0x0800475f
 8003d48:	08004797 	.word	0x08004797
 8003d4c:	080047bb 	.word	0x080047bb

08003d50 <_cleanup_r>:
 8003d50:	4901      	ldr	r1, [pc, #4]	; (8003d58 <_cleanup_r+0x8>)
 8003d52:	f000 b8c1 	b.w	8003ed8 <_fwalk_reent>
 8003d56:	bf00      	nop
 8003d58:	08003c91 	.word	0x08003c91

08003d5c <__sfmoreglue>:
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	2568      	movs	r5, #104	; 0x68
 8003d60:	1e4a      	subs	r2, r1, #1
 8003d62:	4355      	muls	r5, r2
 8003d64:	460e      	mov	r6, r1
 8003d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d6a:	f000 f98f 	bl	800408c <_malloc_r>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	b140      	cbz	r0, 8003d84 <__sfmoreglue+0x28>
 8003d72:	2100      	movs	r1, #0
 8003d74:	e9c0 1600 	strd	r1, r6, [r0]
 8003d78:	300c      	adds	r0, #12
 8003d7a:	60a0      	str	r0, [r4, #8]
 8003d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d80:	f7ff fd4c 	bl	800381c <memset>
 8003d84:	4620      	mov	r0, r4
 8003d86:	bd70      	pop	{r4, r5, r6, pc}

08003d88 <__sfp_lock_acquire>:
 8003d88:	4801      	ldr	r0, [pc, #4]	; (8003d90 <__sfp_lock_acquire+0x8>)
 8003d8a:	f000 b8c5 	b.w	8003f18 <__retarget_lock_acquire_recursive>
 8003d8e:	bf00      	nop
 8003d90:	20003378 	.word	0x20003378

08003d94 <__sfp_lock_release>:
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <__sfp_lock_release+0x8>)
 8003d96:	f000 b8c0 	b.w	8003f1a <__retarget_lock_release_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	20003378 	.word	0x20003378

08003da0 <__sinit_lock_acquire>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__sinit_lock_acquire+0x8>)
 8003da2:	f000 b8b9 	b.w	8003f18 <__retarget_lock_acquire_recursive>
 8003da6:	bf00      	nop
 8003da8:	20003373 	.word	0x20003373

08003dac <__sinit_lock_release>:
 8003dac:	4801      	ldr	r0, [pc, #4]	; (8003db4 <__sinit_lock_release+0x8>)
 8003dae:	f000 b8b4 	b.w	8003f1a <__retarget_lock_release_recursive>
 8003db2:	bf00      	nop
 8003db4:	20003373 	.word	0x20003373

08003db8 <__sinit>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	f7ff fff0 	bl	8003da0 <__sinit_lock_acquire>
 8003dc0:	69a3      	ldr	r3, [r4, #24]
 8003dc2:	b11b      	cbz	r3, 8003dcc <__sinit+0x14>
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc8:	f7ff bff0 	b.w	8003dac <__sinit_lock_release>
 8003dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <__sinit+0x68>)
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <__sinit+0x6c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	bf08      	it	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	4620      	mov	r0, r4
 8003de2:	bf08      	it	eq
 8003de4:	61a3      	streq	r3, [r4, #24]
 8003de6:	f000 f81f 	bl	8003e28 <__sfp>
 8003dea:	6060      	str	r0, [r4, #4]
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 f81b 	bl	8003e28 <__sfp>
 8003df2:	60a0      	str	r0, [r4, #8]
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f817 	bl	8003e28 <__sfp>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	60e0      	str	r0, [r4, #12]
 8003e00:	6860      	ldr	r0, [r4, #4]
 8003e02:	f7ff ff81 	bl	8003d08 <std>
 8003e06:	2201      	movs	r2, #1
 8003e08:	2109      	movs	r1, #9
 8003e0a:	68a0      	ldr	r0, [r4, #8]
 8003e0c:	f7ff ff7c 	bl	8003d08 <std>
 8003e10:	2202      	movs	r2, #2
 8003e12:	2112      	movs	r1, #18
 8003e14:	68e0      	ldr	r0, [r4, #12]
 8003e16:	f7ff ff77 	bl	8003d08 <std>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61a3      	str	r3, [r4, #24]
 8003e1e:	e7d1      	b.n	8003dc4 <__sinit+0xc>
 8003e20:	0800b71c 	.word	0x0800b71c
 8003e24:	08003d51 	.word	0x08003d51

08003e28 <__sfp>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	4607      	mov	r7, r0
 8003e2c:	f7ff ffac 	bl	8003d88 <__sfp_lock_acquire>
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <__sfp+0x84>)
 8003e32:	681e      	ldr	r6, [r3, #0]
 8003e34:	69b3      	ldr	r3, [r6, #24]
 8003e36:	b913      	cbnz	r3, 8003e3e <__sfp+0x16>
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f7ff ffbd 	bl	8003db8 <__sinit>
 8003e3e:	3648      	adds	r6, #72	; 0x48
 8003e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	d503      	bpl.n	8003e50 <__sfp+0x28>
 8003e48:	6833      	ldr	r3, [r6, #0]
 8003e4a:	b30b      	cbz	r3, 8003e90 <__sfp+0x68>
 8003e4c:	6836      	ldr	r6, [r6, #0]
 8003e4e:	e7f7      	b.n	8003e40 <__sfp+0x18>
 8003e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e54:	b9d5      	cbnz	r5, 8003e8c <__sfp+0x64>
 8003e56:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <__sfp+0x88>)
 8003e58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e5c:	60e3      	str	r3, [r4, #12]
 8003e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8003e60:	f000 f859 	bl	8003f16 <__retarget_lock_init_recursive>
 8003e64:	f7ff ff96 	bl	8003d94 <__sfp_lock_release>
 8003e68:	2208      	movs	r2, #8
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e74:	6025      	str	r5, [r4, #0]
 8003e76:	61a5      	str	r5, [r4, #24]
 8003e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e7c:	f7ff fcce 	bl	800381c <memset>
 8003e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e88:	4620      	mov	r0, r4
 8003e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e8c:	3468      	adds	r4, #104	; 0x68
 8003e8e:	e7d9      	b.n	8003e44 <__sfp+0x1c>
 8003e90:	2104      	movs	r1, #4
 8003e92:	4638      	mov	r0, r7
 8003e94:	f7ff ff62 	bl	8003d5c <__sfmoreglue>
 8003e98:	4604      	mov	r4, r0
 8003e9a:	6030      	str	r0, [r6, #0]
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d1d5      	bne.n	8003e4c <__sfp+0x24>
 8003ea0:	f7ff ff78 	bl	8003d94 <__sfp_lock_release>
 8003ea4:	230c      	movs	r3, #12
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	e7ee      	b.n	8003e88 <__sfp+0x60>
 8003eaa:	bf00      	nop
 8003eac:	0800b71c 	.word	0x0800b71c
 8003eb0:	ffff0001 	.word	0xffff0001

08003eb4 <fiprintf>:
 8003eb4:	b40e      	push	{r1, r2, r3}
 8003eb6:	b503      	push	{r0, r1, lr}
 8003eb8:	4601      	mov	r1, r0
 8003eba:	ab03      	add	r3, sp, #12
 8003ebc:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <fiprintf+0x20>)
 8003ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ec2:	6800      	ldr	r0, [r0, #0]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	f000 f963 	bl	8004190 <_vfiprintf_r>
 8003eca:	b002      	add	sp, #8
 8003ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed0:	b003      	add	sp, #12
 8003ed2:	4770      	bx	lr
 8003ed4:	2000007c 	.word	0x2000007c

08003ed8 <_fwalk_reent>:
 8003ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003edc:	4606      	mov	r6, r0
 8003ede:	4688      	mov	r8, r1
 8003ee0:	2700      	movs	r7, #0
 8003ee2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eea:	f1b9 0901 	subs.w	r9, r9, #1
 8003eee:	d505      	bpl.n	8003efc <_fwalk_reent+0x24>
 8003ef0:	6824      	ldr	r4, [r4, #0]
 8003ef2:	2c00      	cmp	r4, #0
 8003ef4:	d1f7      	bne.n	8003ee6 <_fwalk_reent+0xe>
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003efc:	89ab      	ldrh	r3, [r5, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d907      	bls.n	8003f12 <_fwalk_reent+0x3a>
 8003f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f06:	3301      	adds	r3, #1
 8003f08:	d003      	beq.n	8003f12 <_fwalk_reent+0x3a>
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	47c0      	blx	r8
 8003f10:	4307      	orrs	r7, r0
 8003f12:	3568      	adds	r5, #104	; 0x68
 8003f14:	e7e9      	b.n	8003eea <_fwalk_reent+0x12>

08003f16 <__retarget_lock_init_recursive>:
 8003f16:	4770      	bx	lr

08003f18 <__retarget_lock_acquire_recursive>:
 8003f18:	4770      	bx	lr

08003f1a <__retarget_lock_release_recursive>:
 8003f1a:	4770      	bx	lr

08003f1c <__swhatbuf_r>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	460e      	mov	r6, r1
 8003f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f24:	4614      	mov	r4, r2
 8003f26:	2900      	cmp	r1, #0
 8003f28:	461d      	mov	r5, r3
 8003f2a:	b096      	sub	sp, #88	; 0x58
 8003f2c:	da07      	bge.n	8003f3e <__swhatbuf_r+0x22>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	89b3      	ldrh	r3, [r6, #12]
 8003f34:	061a      	lsls	r2, r3, #24
 8003f36:	d410      	bmi.n	8003f5a <__swhatbuf_r+0x3e>
 8003f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3c:	e00e      	b.n	8003f5c <__swhatbuf_r+0x40>
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f000 fc6a 	bl	8004818 <_fstat_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	dbf2      	blt.n	8003f2e <__swhatbuf_r+0x12>
 8003f48:	9a01      	ldr	r2, [sp, #4]
 8003f4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f52:	425a      	negs	r2, r3
 8003f54:	415a      	adcs	r2, r3
 8003f56:	602a      	str	r2, [r5, #0]
 8003f58:	e7ee      	b.n	8003f38 <__swhatbuf_r+0x1c>
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	b016      	add	sp, #88	; 0x58
 8003f62:	bd70      	pop	{r4, r5, r6, pc}

08003f64 <__smakebuf_r>:
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f68:	079d      	lsls	r5, r3, #30
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	d507      	bpl.n	8003f80 <__smakebuf_r+0x1c>
 8003f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6163      	str	r3, [r4, #20]
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	466a      	mov	r2, sp
 8003f82:	ab01      	add	r3, sp, #4
 8003f84:	f7ff ffca 	bl	8003f1c <__swhatbuf_r>
 8003f88:	9900      	ldr	r1, [sp, #0]
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 f87d 	bl	800408c <_malloc_r>
 8003f92:	b948      	cbnz	r0, 8003fa8 <__smakebuf_r+0x44>
 8003f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d4ef      	bmi.n	8003f7c <__smakebuf_r+0x18>
 8003f9c:	f023 0303 	bic.w	r3, r3, #3
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e7e3      	b.n	8003f70 <__smakebuf_r+0xc>
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <__smakebuf_r+0x7c>)
 8003faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	9b00      	ldr	r3, [sp, #0]
 8003fb8:	6120      	str	r0, [r4, #16]
 8003fba:	6163      	str	r3, [r4, #20]
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	b15b      	cbz	r3, 8003fd8 <__smakebuf_r+0x74>
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc6:	f000 fc39 	bl	800483c <_isatty_r>
 8003fca:	b128      	cbz	r0, 8003fd8 <__smakebuf_r+0x74>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	89a0      	ldrh	r0, [r4, #12]
 8003fda:	4305      	orrs	r5, r0
 8003fdc:	81a5      	strh	r5, [r4, #12]
 8003fde:	e7cd      	b.n	8003f7c <__smakebuf_r+0x18>
 8003fe0:	08003d51 	.word	0x08003d51

08003fe4 <malloc>:
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <malloc+0xc>)
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f000 b84f 	b.w	800408c <_malloc_r>
 8003fee:	bf00      	nop
 8003ff0:	2000007c 	.word	0x2000007c

08003ff4 <_free_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	d043      	beq.n	8004084 <_free_r+0x90>
 8003ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004000:	1f0c      	subs	r4, r1, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfb8      	it	lt
 8004006:	18e4      	addlt	r4, r4, r3
 8004008:	f000 fc48 	bl	800489c <__malloc_lock>
 800400c:	4a1e      	ldr	r2, [pc, #120]	; (8004088 <_free_r+0x94>)
 800400e:	6813      	ldr	r3, [r2, #0]
 8004010:	4610      	mov	r0, r2
 8004012:	b933      	cbnz	r3, 8004022 <_free_r+0x2e>
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	6014      	str	r4, [r2, #0]
 8004018:	4628      	mov	r0, r5
 800401a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800401e:	f000 bc43 	b.w	80048a8 <__malloc_unlock>
 8004022:	42a3      	cmp	r3, r4
 8004024:	d90a      	bls.n	800403c <_free_r+0x48>
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	1862      	adds	r2, r4, r1
 800402a:	4293      	cmp	r3, r2
 800402c:	bf01      	itttt	eq
 800402e:	681a      	ldreq	r2, [r3, #0]
 8004030:	685b      	ldreq	r3, [r3, #4]
 8004032:	1852      	addeq	r2, r2, r1
 8004034:	6022      	streq	r2, [r4, #0]
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6004      	str	r4, [r0, #0]
 800403a:	e7ed      	b.n	8004018 <_free_r+0x24>
 800403c:	461a      	mov	r2, r3
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	b10b      	cbz	r3, 8004046 <_free_r+0x52>
 8004042:	42a3      	cmp	r3, r4
 8004044:	d9fa      	bls.n	800403c <_free_r+0x48>
 8004046:	6811      	ldr	r1, [r2, #0]
 8004048:	1850      	adds	r0, r2, r1
 800404a:	42a0      	cmp	r0, r4
 800404c:	d10b      	bne.n	8004066 <_free_r+0x72>
 800404e:	6820      	ldr	r0, [r4, #0]
 8004050:	4401      	add	r1, r0
 8004052:	1850      	adds	r0, r2, r1
 8004054:	4283      	cmp	r3, r0
 8004056:	6011      	str	r1, [r2, #0]
 8004058:	d1de      	bne.n	8004018 <_free_r+0x24>
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4401      	add	r1, r0
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	6053      	str	r3, [r2, #4]
 8004064:	e7d8      	b.n	8004018 <_free_r+0x24>
 8004066:	d902      	bls.n	800406e <_free_r+0x7a>
 8004068:	230c      	movs	r3, #12
 800406a:	602b      	str	r3, [r5, #0]
 800406c:	e7d4      	b.n	8004018 <_free_r+0x24>
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	1821      	adds	r1, r4, r0
 8004072:	428b      	cmp	r3, r1
 8004074:	bf01      	itttt	eq
 8004076:	6819      	ldreq	r1, [r3, #0]
 8004078:	685b      	ldreq	r3, [r3, #4]
 800407a:	1809      	addeq	r1, r1, r0
 800407c:	6021      	streq	r1, [r4, #0]
 800407e:	6063      	str	r3, [r4, #4]
 8004080:	6054      	str	r4, [r2, #4]
 8004082:	e7c9      	b.n	8004018 <_free_r+0x24>
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	bf00      	nop
 8004088:	20000474 	.word	0x20000474

0800408c <_malloc_r>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	1ccd      	adds	r5, r1, #3
 8004090:	f025 0503 	bic.w	r5, r5, #3
 8004094:	3508      	adds	r5, #8
 8004096:	2d0c      	cmp	r5, #12
 8004098:	bf38      	it	cc
 800409a:	250c      	movcc	r5, #12
 800409c:	2d00      	cmp	r5, #0
 800409e:	4606      	mov	r6, r0
 80040a0:	db01      	blt.n	80040a6 <_malloc_r+0x1a>
 80040a2:	42a9      	cmp	r1, r5
 80040a4:	d903      	bls.n	80040ae <_malloc_r+0x22>
 80040a6:	230c      	movs	r3, #12
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	2000      	movs	r0, #0
 80040ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ae:	f000 fbf5 	bl	800489c <__malloc_lock>
 80040b2:	4921      	ldr	r1, [pc, #132]	; (8004138 <_malloc_r+0xac>)
 80040b4:	680a      	ldr	r2, [r1, #0]
 80040b6:	4614      	mov	r4, r2
 80040b8:	b99c      	cbnz	r4, 80040e2 <_malloc_r+0x56>
 80040ba:	4f20      	ldr	r7, [pc, #128]	; (800413c <_malloc_r+0xb0>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b923      	cbnz	r3, 80040ca <_malloc_r+0x3e>
 80040c0:	4621      	mov	r1, r4
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 fb2a 	bl	800471c <_sbrk_r>
 80040c8:	6038      	str	r0, [r7, #0]
 80040ca:	4629      	mov	r1, r5
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 fb25 	bl	800471c <_sbrk_r>
 80040d2:	1c43      	adds	r3, r0, #1
 80040d4:	d123      	bne.n	800411e <_malloc_r+0x92>
 80040d6:	230c      	movs	r3, #12
 80040d8:	4630      	mov	r0, r6
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	f000 fbe4 	bl	80048a8 <__malloc_unlock>
 80040e0:	e7e3      	b.n	80040aa <_malloc_r+0x1e>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	1b5b      	subs	r3, r3, r5
 80040e6:	d417      	bmi.n	8004118 <_malloc_r+0x8c>
 80040e8:	2b0b      	cmp	r3, #11
 80040ea:	d903      	bls.n	80040f4 <_malloc_r+0x68>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	441c      	add	r4, r3
 80040f0:	6025      	str	r5, [r4, #0]
 80040f2:	e004      	b.n	80040fe <_malloc_r+0x72>
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	42a2      	cmp	r2, r4
 80040f8:	bf0c      	ite	eq
 80040fa:	600b      	streq	r3, [r1, #0]
 80040fc:	6053      	strne	r3, [r2, #4]
 80040fe:	4630      	mov	r0, r6
 8004100:	f000 fbd2 	bl	80048a8 <__malloc_unlock>
 8004104:	f104 000b 	add.w	r0, r4, #11
 8004108:	1d23      	adds	r3, r4, #4
 800410a:	f020 0007 	bic.w	r0, r0, #7
 800410e:	1ac2      	subs	r2, r0, r3
 8004110:	d0cc      	beq.n	80040ac <_malloc_r+0x20>
 8004112:	1a1b      	subs	r3, r3, r0
 8004114:	50a3      	str	r3, [r4, r2]
 8004116:	e7c9      	b.n	80040ac <_malloc_r+0x20>
 8004118:	4622      	mov	r2, r4
 800411a:	6864      	ldr	r4, [r4, #4]
 800411c:	e7cc      	b.n	80040b8 <_malloc_r+0x2c>
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d0e3      	beq.n	80040f0 <_malloc_r+0x64>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4630      	mov	r0, r6
 800412c:	f000 faf6 	bl	800471c <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d1dd      	bne.n	80040f0 <_malloc_r+0x64>
 8004134:	e7cf      	b.n	80040d6 <_malloc_r+0x4a>
 8004136:	bf00      	nop
 8004138:	20000474 	.word	0x20000474
 800413c:	20000478 	.word	0x20000478

08004140 <__sfputc_r>:
 8004140:	6893      	ldr	r3, [r2, #8]
 8004142:	b410      	push	{r4}
 8004144:	3b01      	subs	r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	6093      	str	r3, [r2, #8]
 800414a:	da07      	bge.n	800415c <__sfputc_r+0x1c>
 800414c:	6994      	ldr	r4, [r2, #24]
 800414e:	42a3      	cmp	r3, r4
 8004150:	db01      	blt.n	8004156 <__sfputc_r+0x16>
 8004152:	290a      	cmp	r1, #10
 8004154:	d102      	bne.n	800415c <__sfputc_r+0x1c>
 8004156:	bc10      	pop	{r4}
 8004158:	f7ff bc36 	b.w	80039c8 <__swbuf_r>
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	1c58      	adds	r0, r3, #1
 8004160:	6010      	str	r0, [r2, #0]
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	4608      	mov	r0, r1
 8004166:	bc10      	pop	{r4}
 8004168:	4770      	bx	lr

0800416a <__sfputs_r>:
 800416a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416c:	4606      	mov	r6, r0
 800416e:	460f      	mov	r7, r1
 8004170:	4614      	mov	r4, r2
 8004172:	18d5      	adds	r5, r2, r3
 8004174:	42ac      	cmp	r4, r5
 8004176:	d101      	bne.n	800417c <__sfputs_r+0x12>
 8004178:	2000      	movs	r0, #0
 800417a:	e007      	b.n	800418c <__sfputs_r+0x22>
 800417c:	463a      	mov	r2, r7
 800417e:	4630      	mov	r0, r6
 8004180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004184:	f7ff ffdc 	bl	8004140 <__sfputc_r>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d1f3      	bne.n	8004174 <__sfputs_r+0xa>
 800418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004190 <_vfiprintf_r>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	460d      	mov	r5, r1
 8004196:	4614      	mov	r4, r2
 8004198:	4698      	mov	r8, r3
 800419a:	4606      	mov	r6, r0
 800419c:	b09d      	sub	sp, #116	; 0x74
 800419e:	b118      	cbz	r0, 80041a8 <_vfiprintf_r+0x18>
 80041a0:	6983      	ldr	r3, [r0, #24]
 80041a2:	b90b      	cbnz	r3, 80041a8 <_vfiprintf_r+0x18>
 80041a4:	f7ff fe08 	bl	8003db8 <__sinit>
 80041a8:	4b89      	ldr	r3, [pc, #548]	; (80043d0 <_vfiprintf_r+0x240>)
 80041aa:	429d      	cmp	r5, r3
 80041ac:	d11b      	bne.n	80041e6 <_vfiprintf_r+0x56>
 80041ae:	6875      	ldr	r5, [r6, #4]
 80041b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041b2:	07d9      	lsls	r1, r3, #31
 80041b4:	d405      	bmi.n	80041c2 <_vfiprintf_r+0x32>
 80041b6:	89ab      	ldrh	r3, [r5, #12]
 80041b8:	059a      	lsls	r2, r3, #22
 80041ba:	d402      	bmi.n	80041c2 <_vfiprintf_r+0x32>
 80041bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041be:	f7ff feab 	bl	8003f18 <__retarget_lock_acquire_recursive>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	d501      	bpl.n	80041cc <_vfiprintf_r+0x3c>
 80041c8:	692b      	ldr	r3, [r5, #16]
 80041ca:	b9eb      	cbnz	r3, 8004208 <_vfiprintf_r+0x78>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7ff fc4c 	bl	8003a6c <__swsetup_r>
 80041d4:	b1c0      	cbz	r0, 8004208 <_vfiprintf_r+0x78>
 80041d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041d8:	07dc      	lsls	r4, r3, #31
 80041da:	d50e      	bpl.n	80041fa <_vfiprintf_r+0x6a>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	b01d      	add	sp, #116	; 0x74
 80041e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e6:	4b7b      	ldr	r3, [pc, #492]	; (80043d4 <_vfiprintf_r+0x244>)
 80041e8:	429d      	cmp	r5, r3
 80041ea:	d101      	bne.n	80041f0 <_vfiprintf_r+0x60>
 80041ec:	68b5      	ldr	r5, [r6, #8]
 80041ee:	e7df      	b.n	80041b0 <_vfiprintf_r+0x20>
 80041f0:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <_vfiprintf_r+0x248>)
 80041f2:	429d      	cmp	r5, r3
 80041f4:	bf08      	it	eq
 80041f6:	68f5      	ldreq	r5, [r6, #12]
 80041f8:	e7da      	b.n	80041b0 <_vfiprintf_r+0x20>
 80041fa:	89ab      	ldrh	r3, [r5, #12]
 80041fc:	0598      	lsls	r0, r3, #22
 80041fe:	d4ed      	bmi.n	80041dc <_vfiprintf_r+0x4c>
 8004200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004202:	f7ff fe8a 	bl	8003f1a <__retarget_lock_release_recursive>
 8004206:	e7e9      	b.n	80041dc <_vfiprintf_r+0x4c>
 8004208:	2300      	movs	r3, #0
 800420a:	9309      	str	r3, [sp, #36]	; 0x24
 800420c:	2320      	movs	r3, #32
 800420e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004212:	2330      	movs	r3, #48	; 0x30
 8004214:	f04f 0901 	mov.w	r9, #1
 8004218:	f8cd 800c 	str.w	r8, [sp, #12]
 800421c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80043dc <_vfiprintf_r+0x24c>
 8004220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004224:	4623      	mov	r3, r4
 8004226:	469a      	mov	sl, r3
 8004228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800422c:	b10a      	cbz	r2, 8004232 <_vfiprintf_r+0xa2>
 800422e:	2a25      	cmp	r2, #37	; 0x25
 8004230:	d1f9      	bne.n	8004226 <_vfiprintf_r+0x96>
 8004232:	ebba 0b04 	subs.w	fp, sl, r4
 8004236:	d00b      	beq.n	8004250 <_vfiprintf_r+0xc0>
 8004238:	465b      	mov	r3, fp
 800423a:	4622      	mov	r2, r4
 800423c:	4629      	mov	r1, r5
 800423e:	4630      	mov	r0, r6
 8004240:	f7ff ff93 	bl	800416a <__sfputs_r>
 8004244:	3001      	adds	r0, #1
 8004246:	f000 80aa 	beq.w	800439e <_vfiprintf_r+0x20e>
 800424a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800424c:	445a      	add	r2, fp
 800424e:	9209      	str	r2, [sp, #36]	; 0x24
 8004250:	f89a 3000 	ldrb.w	r3, [sl]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a2 	beq.w	800439e <_vfiprintf_r+0x20e>
 800425a:	2300      	movs	r3, #0
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004264:	f10a 0a01 	add.w	sl, sl, #1
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	9307      	str	r3, [sp, #28]
 800426c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004270:	931a      	str	r3, [sp, #104]	; 0x68
 8004272:	4654      	mov	r4, sl
 8004274:	2205      	movs	r2, #5
 8004276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427a:	4858      	ldr	r0, [pc, #352]	; (80043dc <_vfiprintf_r+0x24c>)
 800427c:	f000 fb00 	bl	8004880 <memchr>
 8004280:	9a04      	ldr	r2, [sp, #16]
 8004282:	b9d8      	cbnz	r0, 80042bc <_vfiprintf_r+0x12c>
 8004284:	06d1      	lsls	r1, r2, #27
 8004286:	bf44      	itt	mi
 8004288:	2320      	movmi	r3, #32
 800428a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800428e:	0713      	lsls	r3, r2, #28
 8004290:	bf44      	itt	mi
 8004292:	232b      	movmi	r3, #43	; 0x2b
 8004294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004298:	f89a 3000 	ldrb.w	r3, [sl]
 800429c:	2b2a      	cmp	r3, #42	; 0x2a
 800429e:	d015      	beq.n	80042cc <_vfiprintf_r+0x13c>
 80042a0:	4654      	mov	r4, sl
 80042a2:	2000      	movs	r0, #0
 80042a4:	f04f 0c0a 	mov.w	ip, #10
 80042a8:	9a07      	ldr	r2, [sp, #28]
 80042aa:	4621      	mov	r1, r4
 80042ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b0:	3b30      	subs	r3, #48	; 0x30
 80042b2:	2b09      	cmp	r3, #9
 80042b4:	d94e      	bls.n	8004354 <_vfiprintf_r+0x1c4>
 80042b6:	b1b0      	cbz	r0, 80042e6 <_vfiprintf_r+0x156>
 80042b8:	9207      	str	r2, [sp, #28]
 80042ba:	e014      	b.n	80042e6 <_vfiprintf_r+0x156>
 80042bc:	eba0 0308 	sub.w	r3, r0, r8
 80042c0:	fa09 f303 	lsl.w	r3, r9, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	46a2      	mov	sl, r4
 80042c8:	9304      	str	r3, [sp, #16]
 80042ca:	e7d2      	b.n	8004272 <_vfiprintf_r+0xe2>
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	1d19      	adds	r1, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	9103      	str	r1, [sp, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bfbb      	ittet	lt
 80042d8:	425b      	neglt	r3, r3
 80042da:	f042 0202 	orrlt.w	r2, r2, #2
 80042de:	9307      	strge	r3, [sp, #28]
 80042e0:	9307      	strlt	r3, [sp, #28]
 80042e2:	bfb8      	it	lt
 80042e4:	9204      	strlt	r2, [sp, #16]
 80042e6:	7823      	ldrb	r3, [r4, #0]
 80042e8:	2b2e      	cmp	r3, #46	; 0x2e
 80042ea:	d10c      	bne.n	8004306 <_vfiprintf_r+0x176>
 80042ec:	7863      	ldrb	r3, [r4, #1]
 80042ee:	2b2a      	cmp	r3, #42	; 0x2a
 80042f0:	d135      	bne.n	800435e <_vfiprintf_r+0x1ce>
 80042f2:	9b03      	ldr	r3, [sp, #12]
 80042f4:	3402      	adds	r4, #2
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	9203      	str	r2, [sp, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bfb8      	it	lt
 8004300:	f04f 33ff 	movlt.w	r3, #4294967295
 8004304:	9305      	str	r3, [sp, #20]
 8004306:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043ec <_vfiprintf_r+0x25c>
 800430a:	2203      	movs	r2, #3
 800430c:	4650      	mov	r0, sl
 800430e:	7821      	ldrb	r1, [r4, #0]
 8004310:	f000 fab6 	bl	8004880 <memchr>
 8004314:	b140      	cbz	r0, 8004328 <_vfiprintf_r+0x198>
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	eba0 000a 	sub.w	r0, r0, sl
 800431c:	fa03 f000 	lsl.w	r0, r3, r0
 8004320:	9b04      	ldr	r3, [sp, #16]
 8004322:	3401      	adds	r4, #1
 8004324:	4303      	orrs	r3, r0
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432c:	2206      	movs	r2, #6
 800432e:	482c      	ldr	r0, [pc, #176]	; (80043e0 <_vfiprintf_r+0x250>)
 8004330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004334:	f000 faa4 	bl	8004880 <memchr>
 8004338:	2800      	cmp	r0, #0
 800433a:	d03f      	beq.n	80043bc <_vfiprintf_r+0x22c>
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <_vfiprintf_r+0x254>)
 800433e:	bb1b      	cbnz	r3, 8004388 <_vfiprintf_r+0x1f8>
 8004340:	9b03      	ldr	r3, [sp, #12]
 8004342:	3307      	adds	r3, #7
 8004344:	f023 0307 	bic.w	r3, r3, #7
 8004348:	3308      	adds	r3, #8
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800434e:	443b      	add	r3, r7
 8004350:	9309      	str	r3, [sp, #36]	; 0x24
 8004352:	e767      	b.n	8004224 <_vfiprintf_r+0x94>
 8004354:	460c      	mov	r4, r1
 8004356:	2001      	movs	r0, #1
 8004358:	fb0c 3202 	mla	r2, ip, r2, r3
 800435c:	e7a5      	b.n	80042aa <_vfiprintf_r+0x11a>
 800435e:	2300      	movs	r3, #0
 8004360:	f04f 0c0a 	mov.w	ip, #10
 8004364:	4619      	mov	r1, r3
 8004366:	3401      	adds	r4, #1
 8004368:	9305      	str	r3, [sp, #20]
 800436a:	4620      	mov	r0, r4
 800436c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004370:	3a30      	subs	r2, #48	; 0x30
 8004372:	2a09      	cmp	r2, #9
 8004374:	d903      	bls.n	800437e <_vfiprintf_r+0x1ee>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0c5      	beq.n	8004306 <_vfiprintf_r+0x176>
 800437a:	9105      	str	r1, [sp, #20]
 800437c:	e7c3      	b.n	8004306 <_vfiprintf_r+0x176>
 800437e:	4604      	mov	r4, r0
 8004380:	2301      	movs	r3, #1
 8004382:	fb0c 2101 	mla	r1, ip, r1, r2
 8004386:	e7f0      	b.n	800436a <_vfiprintf_r+0x1da>
 8004388:	ab03      	add	r3, sp, #12
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	462a      	mov	r2, r5
 800438e:	4630      	mov	r0, r6
 8004390:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <_vfiprintf_r+0x258>)
 8004392:	a904      	add	r1, sp, #16
 8004394:	f3af 8000 	nop.w
 8004398:	4607      	mov	r7, r0
 800439a:	1c78      	adds	r0, r7, #1
 800439c:	d1d6      	bne.n	800434c <_vfiprintf_r+0x1bc>
 800439e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043a0:	07d9      	lsls	r1, r3, #31
 80043a2:	d405      	bmi.n	80043b0 <_vfiprintf_r+0x220>
 80043a4:	89ab      	ldrh	r3, [r5, #12]
 80043a6:	059a      	lsls	r2, r3, #22
 80043a8:	d402      	bmi.n	80043b0 <_vfiprintf_r+0x220>
 80043aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ac:	f7ff fdb5 	bl	8003f1a <__retarget_lock_release_recursive>
 80043b0:	89ab      	ldrh	r3, [r5, #12]
 80043b2:	065b      	lsls	r3, r3, #25
 80043b4:	f53f af12 	bmi.w	80041dc <_vfiprintf_r+0x4c>
 80043b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ba:	e711      	b.n	80041e0 <_vfiprintf_r+0x50>
 80043bc:	ab03      	add	r3, sp, #12
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	462a      	mov	r2, r5
 80043c2:	4630      	mov	r0, r6
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_vfiprintf_r+0x258>)
 80043c6:	a904      	add	r1, sp, #16
 80043c8:	f000 f882 	bl	80044d0 <_printf_i>
 80043cc:	e7e4      	b.n	8004398 <_vfiprintf_r+0x208>
 80043ce:	bf00      	nop
 80043d0:	0800b7f4 	.word	0x0800b7f4
 80043d4:	0800b814 	.word	0x0800b814
 80043d8:	0800b7d4 	.word	0x0800b7d4
 80043dc:	0800b834 	.word	0x0800b834
 80043e0:	0800b83e 	.word	0x0800b83e
 80043e4:	00000000 	.word	0x00000000
 80043e8:	0800416b 	.word	0x0800416b
 80043ec:	0800b83a 	.word	0x0800b83a

080043f0 <_printf_common>:
 80043f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f4:	4616      	mov	r6, r2
 80043f6:	4699      	mov	r9, r3
 80043f8:	688a      	ldr	r2, [r1, #8]
 80043fa:	690b      	ldr	r3, [r1, #16]
 80043fc:	4607      	mov	r7, r0
 80043fe:	4293      	cmp	r3, r2
 8004400:	bfb8      	it	lt
 8004402:	4613      	movlt	r3, r2
 8004404:	6033      	str	r3, [r6, #0]
 8004406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800440a:	460c      	mov	r4, r1
 800440c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004410:	b10a      	cbz	r2, 8004416 <_printf_common+0x26>
 8004412:	3301      	adds	r3, #1
 8004414:	6033      	str	r3, [r6, #0]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	0699      	lsls	r1, r3, #26
 800441a:	bf42      	ittt	mi
 800441c:	6833      	ldrmi	r3, [r6, #0]
 800441e:	3302      	addmi	r3, #2
 8004420:	6033      	strmi	r3, [r6, #0]
 8004422:	6825      	ldr	r5, [r4, #0]
 8004424:	f015 0506 	ands.w	r5, r5, #6
 8004428:	d106      	bne.n	8004438 <_printf_common+0x48>
 800442a:	f104 0a19 	add.w	sl, r4, #25
 800442e:	68e3      	ldr	r3, [r4, #12]
 8004430:	6832      	ldr	r2, [r6, #0]
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	42ab      	cmp	r3, r5
 8004436:	dc28      	bgt.n	800448a <_printf_common+0x9a>
 8004438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800443c:	1e13      	subs	r3, r2, #0
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	bf18      	it	ne
 8004442:	2301      	movne	r3, #1
 8004444:	0692      	lsls	r2, r2, #26
 8004446:	d42d      	bmi.n	80044a4 <_printf_common+0xb4>
 8004448:	4649      	mov	r1, r9
 800444a:	4638      	mov	r0, r7
 800444c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004450:	47c0      	blx	r8
 8004452:	3001      	adds	r0, #1
 8004454:	d020      	beq.n	8004498 <_printf_common+0xa8>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	68e5      	ldr	r5, [r4, #12]
 800445a:	f003 0306 	and.w	r3, r3, #6
 800445e:	2b04      	cmp	r3, #4
 8004460:	bf18      	it	ne
 8004462:	2500      	movne	r5, #0
 8004464:	6832      	ldr	r2, [r6, #0]
 8004466:	f04f 0600 	mov.w	r6, #0
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	bf08      	it	eq
 800446e:	1aad      	subeq	r5, r5, r2
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	bf08      	it	eq
 8004474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004478:	4293      	cmp	r3, r2
 800447a:	bfc4      	itt	gt
 800447c:	1a9b      	subgt	r3, r3, r2
 800447e:	18ed      	addgt	r5, r5, r3
 8004480:	341a      	adds	r4, #26
 8004482:	42b5      	cmp	r5, r6
 8004484:	d11a      	bne.n	80044bc <_printf_common+0xcc>
 8004486:	2000      	movs	r0, #0
 8004488:	e008      	b.n	800449c <_printf_common+0xac>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4649      	mov	r1, r9
 8004490:	4638      	mov	r0, r7
 8004492:	47c0      	blx	r8
 8004494:	3001      	adds	r0, #1
 8004496:	d103      	bne.n	80044a0 <_printf_common+0xb0>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	3501      	adds	r5, #1
 80044a2:	e7c4      	b.n	800442e <_printf_common+0x3e>
 80044a4:	2030      	movs	r0, #48	; 0x30
 80044a6:	18e1      	adds	r1, r4, r3
 80044a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044b2:	4422      	add	r2, r4
 80044b4:	3302      	adds	r3, #2
 80044b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ba:	e7c5      	b.n	8004448 <_printf_common+0x58>
 80044bc:	2301      	movs	r3, #1
 80044be:	4622      	mov	r2, r4
 80044c0:	4649      	mov	r1, r9
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0e6      	beq.n	8004498 <_printf_common+0xa8>
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7d9      	b.n	8004482 <_printf_common+0x92>
	...

080044d0 <_printf_i>:
 80044d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	460c      	mov	r4, r1
 80044d6:	7e27      	ldrb	r7, [r4, #24]
 80044d8:	4691      	mov	r9, r2
 80044da:	2f78      	cmp	r7, #120	; 0x78
 80044dc:	4680      	mov	r8, r0
 80044de:	469a      	mov	sl, r3
 80044e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e6:	d807      	bhi.n	80044f8 <_printf_i+0x28>
 80044e8:	2f62      	cmp	r7, #98	; 0x62
 80044ea:	d80a      	bhi.n	8004502 <_printf_i+0x32>
 80044ec:	2f00      	cmp	r7, #0
 80044ee:	f000 80d9 	beq.w	80046a4 <_printf_i+0x1d4>
 80044f2:	2f58      	cmp	r7, #88	; 0x58
 80044f4:	f000 80a4 	beq.w	8004640 <_printf_i+0x170>
 80044f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004500:	e03a      	b.n	8004578 <_printf_i+0xa8>
 8004502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004506:	2b15      	cmp	r3, #21
 8004508:	d8f6      	bhi.n	80044f8 <_printf_i+0x28>
 800450a:	a001      	add	r0, pc, #4	; (adr r0, 8004510 <_printf_i+0x40>)
 800450c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004510:	08004569 	.word	0x08004569
 8004514:	0800457d 	.word	0x0800457d
 8004518:	080044f9 	.word	0x080044f9
 800451c:	080044f9 	.word	0x080044f9
 8004520:	080044f9 	.word	0x080044f9
 8004524:	080044f9 	.word	0x080044f9
 8004528:	0800457d 	.word	0x0800457d
 800452c:	080044f9 	.word	0x080044f9
 8004530:	080044f9 	.word	0x080044f9
 8004534:	080044f9 	.word	0x080044f9
 8004538:	080044f9 	.word	0x080044f9
 800453c:	0800468b 	.word	0x0800468b
 8004540:	080045ad 	.word	0x080045ad
 8004544:	0800466d 	.word	0x0800466d
 8004548:	080044f9 	.word	0x080044f9
 800454c:	080044f9 	.word	0x080044f9
 8004550:	080046ad 	.word	0x080046ad
 8004554:	080044f9 	.word	0x080044f9
 8004558:	080045ad 	.word	0x080045ad
 800455c:	080044f9 	.word	0x080044f9
 8004560:	080044f9 	.word	0x080044f9
 8004564:	08004675 	.word	0x08004675
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	600a      	str	r2, [r1, #0]
 8004574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004578:	2301      	movs	r3, #1
 800457a:	e0a4      	b.n	80046c6 <_printf_i+0x1f6>
 800457c:	6825      	ldr	r5, [r4, #0]
 800457e:	6808      	ldr	r0, [r1, #0]
 8004580:	062e      	lsls	r6, r5, #24
 8004582:	f100 0304 	add.w	r3, r0, #4
 8004586:	d50a      	bpl.n	800459e <_printf_i+0xce>
 8004588:	6805      	ldr	r5, [r0, #0]
 800458a:	600b      	str	r3, [r1, #0]
 800458c:	2d00      	cmp	r5, #0
 800458e:	da03      	bge.n	8004598 <_printf_i+0xc8>
 8004590:	232d      	movs	r3, #45	; 0x2d
 8004592:	426d      	negs	r5, r5
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004598:	230a      	movs	r3, #10
 800459a:	485e      	ldr	r0, [pc, #376]	; (8004714 <_printf_i+0x244>)
 800459c:	e019      	b.n	80045d2 <_printf_i+0x102>
 800459e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045a2:	6805      	ldr	r5, [r0, #0]
 80045a4:	600b      	str	r3, [r1, #0]
 80045a6:	bf18      	it	ne
 80045a8:	b22d      	sxthne	r5, r5
 80045aa:	e7ef      	b.n	800458c <_printf_i+0xbc>
 80045ac:	680b      	ldr	r3, [r1, #0]
 80045ae:	6825      	ldr	r5, [r4, #0]
 80045b0:	1d18      	adds	r0, r3, #4
 80045b2:	6008      	str	r0, [r1, #0]
 80045b4:	0628      	lsls	r0, r5, #24
 80045b6:	d501      	bpl.n	80045bc <_printf_i+0xec>
 80045b8:	681d      	ldr	r5, [r3, #0]
 80045ba:	e002      	b.n	80045c2 <_printf_i+0xf2>
 80045bc:	0669      	lsls	r1, r5, #25
 80045be:	d5fb      	bpl.n	80045b8 <_printf_i+0xe8>
 80045c0:	881d      	ldrh	r5, [r3, #0]
 80045c2:	2f6f      	cmp	r7, #111	; 0x6f
 80045c4:	bf0c      	ite	eq
 80045c6:	2308      	moveq	r3, #8
 80045c8:	230a      	movne	r3, #10
 80045ca:	4852      	ldr	r0, [pc, #328]	; (8004714 <_printf_i+0x244>)
 80045cc:	2100      	movs	r1, #0
 80045ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045d2:	6866      	ldr	r6, [r4, #4]
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	bfa8      	it	ge
 80045d8:	6821      	ldrge	r1, [r4, #0]
 80045da:	60a6      	str	r6, [r4, #8]
 80045dc:	bfa4      	itt	ge
 80045de:	f021 0104 	bicge.w	r1, r1, #4
 80045e2:	6021      	strge	r1, [r4, #0]
 80045e4:	b90d      	cbnz	r5, 80045ea <_printf_i+0x11a>
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d04d      	beq.n	8004686 <_printf_i+0x1b6>
 80045ea:	4616      	mov	r6, r2
 80045ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80045f0:	fb03 5711 	mls	r7, r3, r1, r5
 80045f4:	5dc7      	ldrb	r7, [r0, r7]
 80045f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045fa:	462f      	mov	r7, r5
 80045fc:	42bb      	cmp	r3, r7
 80045fe:	460d      	mov	r5, r1
 8004600:	d9f4      	bls.n	80045ec <_printf_i+0x11c>
 8004602:	2b08      	cmp	r3, #8
 8004604:	d10b      	bne.n	800461e <_printf_i+0x14e>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	07df      	lsls	r7, r3, #31
 800460a:	d508      	bpl.n	800461e <_printf_i+0x14e>
 800460c:	6923      	ldr	r3, [r4, #16]
 800460e:	6861      	ldr	r1, [r4, #4]
 8004610:	4299      	cmp	r1, r3
 8004612:	bfde      	ittt	le
 8004614:	2330      	movle	r3, #48	; 0x30
 8004616:	f806 3c01 	strble.w	r3, [r6, #-1]
 800461a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800461e:	1b92      	subs	r2, r2, r6
 8004620:	6122      	str	r2, [r4, #16]
 8004622:	464b      	mov	r3, r9
 8004624:	4621      	mov	r1, r4
 8004626:	4640      	mov	r0, r8
 8004628:	f8cd a000 	str.w	sl, [sp]
 800462c:	aa03      	add	r2, sp, #12
 800462e:	f7ff fedf 	bl	80043f0 <_printf_common>
 8004632:	3001      	adds	r0, #1
 8004634:	d14c      	bne.n	80046d0 <_printf_i+0x200>
 8004636:	f04f 30ff 	mov.w	r0, #4294967295
 800463a:	b004      	add	sp, #16
 800463c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004640:	4834      	ldr	r0, [pc, #208]	; (8004714 <_printf_i+0x244>)
 8004642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004646:	680e      	ldr	r6, [r1, #0]
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f856 5b04 	ldr.w	r5, [r6], #4
 800464e:	061f      	lsls	r7, r3, #24
 8004650:	600e      	str	r6, [r1, #0]
 8004652:	d514      	bpl.n	800467e <_printf_i+0x1ae>
 8004654:	07d9      	lsls	r1, r3, #31
 8004656:	bf44      	itt	mi
 8004658:	f043 0320 	orrmi.w	r3, r3, #32
 800465c:	6023      	strmi	r3, [r4, #0]
 800465e:	b91d      	cbnz	r5, 8004668 <_printf_i+0x198>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	f023 0320 	bic.w	r3, r3, #32
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	2310      	movs	r3, #16
 800466a:	e7af      	b.n	80045cc <_printf_i+0xfc>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	2378      	movs	r3, #120	; 0x78
 8004676:	4828      	ldr	r0, [pc, #160]	; (8004718 <_printf_i+0x248>)
 8004678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800467c:	e7e3      	b.n	8004646 <_printf_i+0x176>
 800467e:	065e      	lsls	r6, r3, #25
 8004680:	bf48      	it	mi
 8004682:	b2ad      	uxthmi	r5, r5
 8004684:	e7e6      	b.n	8004654 <_printf_i+0x184>
 8004686:	4616      	mov	r6, r2
 8004688:	e7bb      	b.n	8004602 <_printf_i+0x132>
 800468a:	680b      	ldr	r3, [r1, #0]
 800468c:	6826      	ldr	r6, [r4, #0]
 800468e:	1d1d      	adds	r5, r3, #4
 8004690:	6960      	ldr	r0, [r4, #20]
 8004692:	600d      	str	r5, [r1, #0]
 8004694:	0635      	lsls	r5, r6, #24
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	d501      	bpl.n	800469e <_printf_i+0x1ce>
 800469a:	6018      	str	r0, [r3, #0]
 800469c:	e002      	b.n	80046a4 <_printf_i+0x1d4>
 800469e:	0671      	lsls	r1, r6, #25
 80046a0:	d5fb      	bpl.n	800469a <_printf_i+0x1ca>
 80046a2:	8018      	strh	r0, [r3, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	4616      	mov	r6, r2
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	e7ba      	b.n	8004622 <_printf_i+0x152>
 80046ac:	680b      	ldr	r3, [r1, #0]
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	600a      	str	r2, [r1, #0]
 80046b2:	681e      	ldr	r6, [r3, #0]
 80046b4:	2100      	movs	r1, #0
 80046b6:	4630      	mov	r0, r6
 80046b8:	6862      	ldr	r2, [r4, #4]
 80046ba:	f000 f8e1 	bl	8004880 <memchr>
 80046be:	b108      	cbz	r0, 80046c4 <_printf_i+0x1f4>
 80046c0:	1b80      	subs	r0, r0, r6
 80046c2:	6060      	str	r0, [r4, #4]
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	6123      	str	r3, [r4, #16]
 80046c8:	2300      	movs	r3, #0
 80046ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ce:	e7a8      	b.n	8004622 <_printf_i+0x152>
 80046d0:	4632      	mov	r2, r6
 80046d2:	4649      	mov	r1, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	47d0      	blx	sl
 80046da:	3001      	adds	r0, #1
 80046dc:	d0ab      	beq.n	8004636 <_printf_i+0x166>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	079b      	lsls	r3, r3, #30
 80046e2:	d413      	bmi.n	800470c <_printf_i+0x23c>
 80046e4:	68e0      	ldr	r0, [r4, #12]
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	4298      	cmp	r0, r3
 80046ea:	bfb8      	it	lt
 80046ec:	4618      	movlt	r0, r3
 80046ee:	e7a4      	b.n	800463a <_printf_i+0x16a>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4632      	mov	r2, r6
 80046f4:	4649      	mov	r1, r9
 80046f6:	4640      	mov	r0, r8
 80046f8:	47d0      	blx	sl
 80046fa:	3001      	adds	r0, #1
 80046fc:	d09b      	beq.n	8004636 <_printf_i+0x166>
 80046fe:	3501      	adds	r5, #1
 8004700:	68e3      	ldr	r3, [r4, #12]
 8004702:	9903      	ldr	r1, [sp, #12]
 8004704:	1a5b      	subs	r3, r3, r1
 8004706:	42ab      	cmp	r3, r5
 8004708:	dcf2      	bgt.n	80046f0 <_printf_i+0x220>
 800470a:	e7eb      	b.n	80046e4 <_printf_i+0x214>
 800470c:	2500      	movs	r5, #0
 800470e:	f104 0619 	add.w	r6, r4, #25
 8004712:	e7f5      	b.n	8004700 <_printf_i+0x230>
 8004714:	0800b845 	.word	0x0800b845
 8004718:	0800b856 	.word	0x0800b856

0800471c <_sbrk_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	2300      	movs	r3, #0
 8004720:	4d05      	ldr	r5, [pc, #20]	; (8004738 <_sbrk_r+0x1c>)
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fe fa9a 	bl	8002c60 <_sbrk>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_sbrk_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_sbrk_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	2000337c 	.word	0x2000337c

0800473c <__sread>:
 800473c:	b510      	push	{r4, lr}
 800473e:	460c      	mov	r4, r1
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	f000 f8b6 	bl	80048b4 <_read_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	bfab      	itete	ge
 800474c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800474e:	89a3      	ldrhlt	r3, [r4, #12]
 8004750:	181b      	addge	r3, r3, r0
 8004752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004756:	bfac      	ite	ge
 8004758:	6563      	strge	r3, [r4, #84]	; 0x54
 800475a:	81a3      	strhlt	r3, [r4, #12]
 800475c:	bd10      	pop	{r4, pc}

0800475e <__swrite>:
 800475e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004762:	461f      	mov	r7, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	4605      	mov	r5, r0
 8004768:	05db      	lsls	r3, r3, #23
 800476a:	460c      	mov	r4, r1
 800476c:	4616      	mov	r6, r2
 800476e:	d505      	bpl.n	800477c <__swrite+0x1e>
 8004770:	2302      	movs	r3, #2
 8004772:	2200      	movs	r2, #0
 8004774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004778:	f000 f870 	bl	800485c <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	4632      	mov	r2, r6
 8004780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	4628      	mov	r0, r5
 8004788:	463b      	mov	r3, r7
 800478a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	f000 b817 	b.w	80047c4 <_write_r>

08004796 <__sseek>:
 8004796:	b510      	push	{r4, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 f85d 	bl	800485c <_lseek_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	bf15      	itete	ne
 80047a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80047aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047b2:	81a3      	strheq	r3, [r4, #12]
 80047b4:	bf18      	it	ne
 80047b6:	81a3      	strhne	r3, [r4, #12]
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__sclose>:
 80047ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047be:	f000 b81b 	b.w	80047f8 <_close_r>
	...

080047c4 <_write_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	2200      	movs	r2, #0
 80047ce:	4d05      	ldr	r5, [pc, #20]	; (80047e4 <_write_r+0x20>)
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7fe f9f7 	bl	8002bc6 <_write>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_write_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_write_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	2000337c 	.word	0x2000337c

080047e8 <abort>:
 80047e8:	2006      	movs	r0, #6
 80047ea:	b508      	push	{r3, lr}
 80047ec:	f000 f89c 	bl	8004928 <raise>
 80047f0:	2001      	movs	r0, #1
 80047f2:	f7fe f9c1 	bl	8002b78 <_exit>
	...

080047f8 <_close_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	2300      	movs	r3, #0
 80047fc:	4d05      	ldr	r5, [pc, #20]	; (8004814 <_close_r+0x1c>)
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	f7fe f9fb 	bl	8002bfe <_close>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_close_r+0x1a>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_close_r+0x1a>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	2000337c 	.word	0x2000337c

08004818 <_fstat_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	2300      	movs	r3, #0
 800481c:	4d06      	ldr	r5, [pc, #24]	; (8004838 <_fstat_r+0x20>)
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	f7fe f9f5 	bl	8002c14 <_fstat>
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d102      	bne.n	8004834 <_fstat_r+0x1c>
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	b103      	cbz	r3, 8004834 <_fstat_r+0x1c>
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	bf00      	nop
 8004838:	2000337c 	.word	0x2000337c

0800483c <_isatty_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	2300      	movs	r3, #0
 8004840:	4d05      	ldr	r5, [pc, #20]	; (8004858 <_isatty_r+0x1c>)
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	602b      	str	r3, [r5, #0]
 8004848:	f7fe f9f3 	bl	8002c32 <_isatty>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_isatty_r+0x1a>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b103      	cbz	r3, 8004856 <_isatty_r+0x1a>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	2000337c 	.word	0x2000337c

0800485c <_lseek_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	2200      	movs	r2, #0
 8004866:	4d05      	ldr	r5, [pc, #20]	; (800487c <_lseek_r+0x20>)
 8004868:	602a      	str	r2, [r5, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	f7fe f9eb 	bl	8002c46 <_lseek>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_lseek_r+0x1e>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_lseek_r+0x1e>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	2000337c 	.word	0x2000337c

08004880 <memchr>:
 8004880:	4603      	mov	r3, r0
 8004882:	b510      	push	{r4, lr}
 8004884:	b2c9      	uxtb	r1, r1
 8004886:	4402      	add	r2, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	4618      	mov	r0, r3
 800488c:	d101      	bne.n	8004892 <memchr+0x12>
 800488e:	2000      	movs	r0, #0
 8004890:	e003      	b.n	800489a <memchr+0x1a>
 8004892:	7804      	ldrb	r4, [r0, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	428c      	cmp	r4, r1
 8004898:	d1f6      	bne.n	8004888 <memchr+0x8>
 800489a:	bd10      	pop	{r4, pc}

0800489c <__malloc_lock>:
 800489c:	4801      	ldr	r0, [pc, #4]	; (80048a4 <__malloc_lock+0x8>)
 800489e:	f7ff bb3b 	b.w	8003f18 <__retarget_lock_acquire_recursive>
 80048a2:	bf00      	nop
 80048a4:	20003374 	.word	0x20003374

080048a8 <__malloc_unlock>:
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <__malloc_unlock+0x8>)
 80048aa:	f7ff bb36 	b.w	8003f1a <__retarget_lock_release_recursive>
 80048ae:	bf00      	nop
 80048b0:	20003374 	.word	0x20003374

080048b4 <_read_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	2200      	movs	r2, #0
 80048be:	4d05      	ldr	r5, [pc, #20]	; (80048d4 <_read_r+0x20>)
 80048c0:	602a      	str	r2, [r5, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fe f962 	bl	8002b8c <_read>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_read_r+0x1e>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_read_r+0x1e>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	2000337c 	.word	0x2000337c

080048d8 <_raise_r>:
 80048d8:	291f      	cmp	r1, #31
 80048da:	b538      	push	{r3, r4, r5, lr}
 80048dc:	4604      	mov	r4, r0
 80048de:	460d      	mov	r5, r1
 80048e0:	d904      	bls.n	80048ec <_raise_r+0x14>
 80048e2:	2316      	movs	r3, #22
 80048e4:	6003      	str	r3, [r0, #0]
 80048e6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048ee:	b112      	cbz	r2, 80048f6 <_raise_r+0x1e>
 80048f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048f4:	b94b      	cbnz	r3, 800490a <_raise_r+0x32>
 80048f6:	4620      	mov	r0, r4
 80048f8:	f000 f830 	bl	800495c <_getpid_r>
 80048fc:	462a      	mov	r2, r5
 80048fe:	4601      	mov	r1, r0
 8004900:	4620      	mov	r0, r4
 8004902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004906:	f000 b817 	b.w	8004938 <_kill_r>
 800490a:	2b01      	cmp	r3, #1
 800490c:	d00a      	beq.n	8004924 <_raise_r+0x4c>
 800490e:	1c59      	adds	r1, r3, #1
 8004910:	d103      	bne.n	800491a <_raise_r+0x42>
 8004912:	2316      	movs	r3, #22
 8004914:	6003      	str	r3, [r0, #0]
 8004916:	2001      	movs	r0, #1
 8004918:	e7e7      	b.n	80048ea <_raise_r+0x12>
 800491a:	2400      	movs	r4, #0
 800491c:	4628      	mov	r0, r5
 800491e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004922:	4798      	blx	r3
 8004924:	2000      	movs	r0, #0
 8004926:	e7e0      	b.n	80048ea <_raise_r+0x12>

08004928 <raise>:
 8004928:	4b02      	ldr	r3, [pc, #8]	; (8004934 <raise+0xc>)
 800492a:	4601      	mov	r1, r0
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f7ff bfd3 	b.w	80048d8 <_raise_r>
 8004932:	bf00      	nop
 8004934:	2000007c 	.word	0x2000007c

08004938 <_kill_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	2300      	movs	r3, #0
 800493c:	4d06      	ldr	r5, [pc, #24]	; (8004958 <_kill_r+0x20>)
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	f7fe f907 	bl	8002b58 <_kill>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d102      	bne.n	8004954 <_kill_r+0x1c>
 800494e:	682b      	ldr	r3, [r5, #0]
 8004950:	b103      	cbz	r3, 8004954 <_kill_r+0x1c>
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	bd38      	pop	{r3, r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	2000337c 	.word	0x2000337c

0800495c <_getpid_r>:
 800495c:	f7fe b8f5 	b.w	8002b4a <_getpid>

08004960 <_init>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr

0800496c <_fini>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr
